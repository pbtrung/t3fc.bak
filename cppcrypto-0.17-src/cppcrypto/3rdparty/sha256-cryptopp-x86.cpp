// This implementation is taken from Crypto++ library.
// Author: Wei Dai.
// This code is placed in the public domain.

// Modified by kerukuro for use in cppcrypto.

#include <stdint.h>
#pragma warning(disable:4731)

namespace cppcrypto
{
	extern const __declspec(align(16)) uint32_t SHA256_K[64];
}

#ifndef _M_X64
	void __fastcall X86_SHA256_HashBlocks(uint32_t *state, const uint32_t *data, size_t len)
	{
		__asm {mov edi, [len]}
		__asm {lea esi, [cppcrypto::SHA256_K + 48 * 4]}
		__asm {push ebp}
		__asm {mov ebx, esp}
		__asm {and esp, -16}
		__asm {sub esp, 8 * 4 + 16 * 4 + 4 * 4}
		__asm {push ebx}
		__asm {mov[esp + 4 + 8 * 4 + 16 * 4 + 1 * 4], ecx}
		__asm {mov[esp + 4 + 8 * 4 + 16 * 4 + 2 * 4], edx}
		__asm {lea eax, [edi + edx]}
		__asm {mov[esp + 4 + 8 * 4 + 16 * 4 + 3 * 4], eax}
		__asm {mov[esp + 4 + 8 * 4 + 16 * 4 + 0 * 4], esi}

		__asm {test edi, 1}
		__asm {jnz label2}
		__asm {dec DWORD PTR[esp + 4 + 8 * 4 + 16 * 4 + 0 * 4]}
		__asm {movdqa xmm0, [ecx + 0 * 16]}
		__asm {movdqa xmm1, [ecx + 1 * 16]}

		__asm {jmp label0}
		__asm {label2:}
		__asm {mov esi, ecx}
		__asm {lea edi, [esp + 4 + ((1024 + 7 - (0 + 7)) - ((1024 + 7 - (0 + 7)) / (8))*(8)) * 4]}
		__asm {mov ecx, 8}
		__asm {rep movsd}
		__asm {mov esi, [esp + 4 + 8 * 4 + 16 * 4 + 0 * 4]}
		__asm {jmp label3}

		__asm {label0:}
		__asm {movdqa[esp + 4 + ((1024 + 7 - (0 + 3)) - ((1024 + 7 - (0 + 3)) / (8))*(8)) * 4], xmm1}
		__asm {movdqa[esp + 4 + ((1024 + 7 - (0 + 7)) - ((1024 + 7 - (0 + 7)) / (8))*(8)) * 4], xmm0}

		__asm {label3:}
		__asm {sub esi, 48 * 4}
		__asm {mov ebx, [edx + 0 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (0 * (1 + 0) + 0)) - ((1024 + 15 - (0 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 1 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (1 * (1 + 0) + 0)) - ((1024 + 15 - (1 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 2 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (2 * (1 + 0) + 0)) - ((1024 + 15 - (2 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 3 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (3 * (1 + 0) + 0)) - ((1024 + 15 - (3 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}
		__asm {mov ebx, [edx + 4 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (4 * (1 + 0) + 0)) - ((1024 + 15 - (4 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 5 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (5 * (1 + 0) + 0)) - ((1024 + 15 - (5 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 6 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (6 * (1 + 0) + 0)) - ((1024 + 15 - (6 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 7 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (7 * (1 + 0) + 0)) - ((1024 + 15 - (7 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}

		__asm {mov ebx, [edx + 8 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (8 * (1 + 0) + 0)) - ((1024 + 15 - (8 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 9 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (9 * (1 + 0) + 0)) - ((1024 + 15 - (9 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 10 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (10 * (1 + 0) + 0)) - ((1024 + 15 - (10 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 11 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (11 * (1 + 0) + 0)) - ((1024 + 15 - (11 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}
		__asm {mov ebx, [edx + 12 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (12 * (1 + 0) + 0)) - ((1024 + 15 - (12 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 13 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (13 * (1 + 0) + 0)) - ((1024 + 15 - (13 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 14 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (14 * (1 + 0) + 0)) - ((1024 + 15 - (14 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}	__asm {mov ebx, [edx + 15 * 4]} __asm {bswap ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (15 * (1 + 0) + 0)) - ((1024 + 15 - (15 * (1 + 0) + 0)) / (16))*(16)) * 4], ebx}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (0 + 3)) - ((1024 + 7 - (0 + 3)) / (8))*(8)) * 4]}
		__asm {mov eax, [esp + 4 + ((1024 + 7 - (0 + 6)) - ((1024 + 7 - (0 + 6)) / (8))*(8)) * 4]}
		__asm {xor eax, [esp + 4 + ((1024 + 7 - (0 + 5)) - ((1024 + 7 - (0 + 5)) / (8))*(8)) * 4]}
		__asm {mov ecx, [esp + 4 + ((1024 + 7 - (0 + 7)) - ((1024 + 7 - (0 + 7)) / (8))*(8)) * 4]}

		__asm {mov edx, [esp + 4 + ((1024 + 7 - (0 + 2)) - ((1024 + 7 - (0 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (0 + 1)) - ((1024 + 7 - (0 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (0 + 1)) - ((1024 + 7 - (0 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25} __asm {add edx, [esi + (0) * 4]} __asm {add edx, [esp + 4 + 8 * 4 + ((1024 + 15 - (0)) - ((1024 + 15 - (0)) / (16))*(16)) * 4]} __asm {add edx, [esp + 4 + ((1024 + 7 - (0)) - ((1024 + 7 - (0)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp}  __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (0 + 6)) - ((1024 + 7 - (0 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (0 + 6)) - ((1024 + 7 - (0 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (0 + 4)) - ((1024 + 7 - (0 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (0 + 4)) - ((1024 + 7 - (0 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (0)) - ((1024 + 7 - (0)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (1 + 2)) - ((1024 + 7 - (1 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (1 + 1)) - ((1024 + 7 - (1 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (1 + 1)) - ((1024 + 7 - (1 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25} __asm {add edi, [esi + (1) * 4]} __asm {add edi, [esp + 4 + 8 * 4 + ((1024 + 15 - (1)) - ((1024 + 15 - (1)) / (16))*(16)) * 4]} __asm {add edi, [esp + 4 + ((1024 + 7 - (1)) - ((1024 + 7 - (1)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp}  __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (1 + 6)) - ((1024 + 7 - (1 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (1 + 6)) - ((1024 + 7 - (1 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (1 + 4)) - ((1024 + 7 - (1 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (1 + 4)) - ((1024 + 7 - (1 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (1)) - ((1024 + 7 - (1)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (2 + 2)) - ((1024 + 7 - (2 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (2 + 1)) - ((1024 + 7 - (2 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (2 + 1)) - ((1024 + 7 - (2 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25} __asm {add edx, [esi + (2) * 4]} __asm {add edx, [esp + 4 + 8 * 4 + ((1024 + 15 - (2)) - ((1024 + 15 - (2)) / (16))*(16)) * 4]} __asm {add edx, [esp + 4 + ((1024 + 7 - (2)) - ((1024 + 7 - (2)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp}  __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (2 + 6)) - ((1024 + 7 - (2 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (2 + 6)) - ((1024 + 7 - (2 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (2 + 4)) - ((1024 + 7 - (2 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (2 + 4)) - ((1024 + 7 - (2 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (2)) - ((1024 + 7 - (2)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (3 + 2)) - ((1024 + 7 - (3 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (3 + 1)) - ((1024 + 7 - (3 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (3 + 1)) - ((1024 + 7 - (3 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25} __asm {add edi, [esi + (3) * 4]} __asm {add edi, [esp + 4 + 8 * 4 + ((1024 + 15 - (3)) - ((1024 + 15 - (3)) / (16))*(16)) * 4]} __asm {add edi, [esp + 4 + ((1024 + 7 - (3)) - ((1024 + 7 - (3)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp}  __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (3 + 6)) - ((1024 + 7 - (3 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (3 + 6)) - ((1024 + 7 - (3 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (3 + 4)) - ((1024 + 7 - (3 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (3 + 4)) - ((1024 + 7 - (3 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (3)) - ((1024 + 7 - (3)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (4 + 2)) - ((1024 + 7 - (4 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (4 + 1)) - ((1024 + 7 - (4 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (4 + 1)) - ((1024 + 7 - (4 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25} __asm {add edx, [esi + (4) * 4]} __asm {add edx, [esp + 4 + 8 * 4 + ((1024 + 15 - (4)) - ((1024 + 15 - (4)) / (16))*(16)) * 4]} __asm {add edx, [esp + 4 + ((1024 + 7 - (4)) - ((1024 + 7 - (4)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp}  __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (4 + 6)) - ((1024 + 7 - (4 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (4 + 6)) - ((1024 + 7 - (4 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (4 + 4)) - ((1024 + 7 - (4 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (4 + 4)) - ((1024 + 7 - (4 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (4)) - ((1024 + 7 - (4)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (5 + 2)) - ((1024 + 7 - (5 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (5 + 1)) - ((1024 + 7 - (5 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (5 + 1)) - ((1024 + 7 - (5 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25} __asm {add edi, [esi + (5) * 4]} __asm {add edi, [esp + 4 + 8 * 4 + ((1024 + 15 - (5)) - ((1024 + 15 - (5)) / (16))*(16)) * 4]} __asm {add edi, [esp + 4 + ((1024 + 7 - (5)) - ((1024 + 7 - (5)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp}  __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (5 + 6)) - ((1024 + 7 - (5 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (5 + 6)) - ((1024 + 7 - (5 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (5 + 4)) - ((1024 + 7 - (5 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (5 + 4)) - ((1024 + 7 - (5 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (5)) - ((1024 + 7 - (5)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (6 + 2)) - ((1024 + 7 - (6 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (6 + 1)) - ((1024 + 7 - (6 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (6 + 1)) - ((1024 + 7 - (6 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25} __asm {add edx, [esi + (6) * 4]} __asm {add edx, [esp + 4 + 8 * 4 + ((1024 + 15 - (6)) - ((1024 + 15 - (6)) / (16))*(16)) * 4]} __asm {add edx, [esp + 4 + ((1024 + 7 - (6)) - ((1024 + 7 - (6)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp}  __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (6 + 6)) - ((1024 + 7 - (6 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (6 + 6)) - ((1024 + 7 - (6 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (6 + 4)) - ((1024 + 7 - (6 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (6 + 4)) - ((1024 + 7 - (6 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (6)) - ((1024 + 7 - (6)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (7 + 2)) - ((1024 + 7 - (7 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (7 + 1)) - ((1024 + 7 - (7 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (7 + 1)) - ((1024 + 7 - (7 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25} __asm {add edi, [esi + (7) * 4]} __asm {add edi, [esp + 4 + 8 * 4 + ((1024 + 15 - (7)) - ((1024 + 15 - (7)) / (16))*(16)) * 4]} __asm {add edi, [esp + 4 + ((1024 + 7 - (7)) - ((1024 + 7 - (7)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp}  __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (7 + 6)) - ((1024 + 7 - (7 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (7 + 6)) - ((1024 + 7 - (7 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (7 + 4)) - ((1024 + 7 - (7 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (7 + 4)) - ((1024 + 7 - (7 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (7)) - ((1024 + 7 - (7)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (8 + 2)) - ((1024 + 7 - (8 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (8 + 1)) - ((1024 + 7 - (8 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (8 + 1)) - ((1024 + 7 - (8 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25} __asm {add edx, [esi + (8) * 4]} __asm {add edx, [esp + 4 + 8 * 4 + ((1024 + 15 - (8)) - ((1024 + 15 - (8)) / (16))*(16)) * 4]} __asm {add edx, [esp + 4 + ((1024 + 7 - (8)) - ((1024 + 7 - (8)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp}  __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (8 + 6)) - ((1024 + 7 - (8 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (8 + 6)) - ((1024 + 7 - (8 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (8 + 4)) - ((1024 + 7 - (8 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (8 + 4)) - ((1024 + 7 - (8 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (8)) - ((1024 + 7 - (8)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (9 + 2)) - ((1024 + 7 - (9 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (9 + 1)) - ((1024 + 7 - (9 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (9 + 1)) - ((1024 + 7 - (9 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25} __asm {add edi, [esi + (9) * 4]} __asm {add edi, [esp + 4 + 8 * 4 + ((1024 + 15 - (9)) - ((1024 + 15 - (9)) / (16))*(16)) * 4]} __asm {add edi, [esp + 4 + ((1024 + 7 - (9)) - ((1024 + 7 - (9)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp}  __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (9 + 6)) - ((1024 + 7 - (9 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (9 + 6)) - ((1024 + 7 - (9 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (9 + 4)) - ((1024 + 7 - (9 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (9 + 4)) - ((1024 + 7 - (9 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (9)) - ((1024 + 7 - (9)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (10 + 2)) - ((1024 + 7 - (10 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (10 + 1)) - ((1024 + 7 - (10 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (10 + 1)) - ((1024 + 7 - (10 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25} __asm {add edx, [esi + (10) * 4]} __asm {add edx, [esp + 4 + 8 * 4 + ((1024 + 15 - (10)) - ((1024 + 15 - (10)) / (16))*(16)) * 4]} __asm {add edx, [esp + 4 + ((1024 + 7 - (10)) - ((1024 + 7 - (10)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp}  __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (10 + 6)) - ((1024 + 7 - (10 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (10 + 6)) - ((1024 + 7 - (10 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (10 + 4)) - ((1024 + 7 - (10 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (10 + 4)) - ((1024 + 7 - (10 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (10)) - ((1024 + 7 - (10)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (11 + 2)) - ((1024 + 7 - (11 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (11 + 1)) - ((1024 + 7 - (11 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (11 + 1)) - ((1024 + 7 - (11 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25} __asm {add edi, [esi + (11) * 4]} __asm {add edi, [esp + 4 + 8 * 4 + ((1024 + 15 - (11)) - ((1024 + 15 - (11)) / (16))*(16)) * 4]} __asm {add edi, [esp + 4 + ((1024 + 7 - (11)) - ((1024 + 7 - (11)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp}  __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (11 + 6)) - ((1024 + 7 - (11 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (11 + 6)) - ((1024 + 7 - (11 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (11 + 4)) - ((1024 + 7 - (11 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (11 + 4)) - ((1024 + 7 - (11 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (11)) - ((1024 + 7 - (11)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (12 + 2)) - ((1024 + 7 - (12 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (12 + 1)) - ((1024 + 7 - (12 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (12 + 1)) - ((1024 + 7 - (12 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25} __asm {add edx, [esi + (12) * 4]} __asm {add edx, [esp + 4 + 8 * 4 + ((1024 + 15 - (12)) - ((1024 + 15 - (12)) / (16))*(16)) * 4]} __asm {add edx, [esp + 4 + ((1024 + 7 - (12)) - ((1024 + 7 - (12)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp}  __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (12 + 6)) - ((1024 + 7 - (12 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (12 + 6)) - ((1024 + 7 - (12 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (12 + 4)) - ((1024 + 7 - (12 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (12 + 4)) - ((1024 + 7 - (12 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (12)) - ((1024 + 7 - (12)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (13 + 2)) - ((1024 + 7 - (13 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (13 + 1)) - ((1024 + 7 - (13 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (13 + 1)) - ((1024 + 7 - (13 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25} __asm {add edi, [esi + (13) * 4]} __asm {add edi, [esp + 4 + 8 * 4 + ((1024 + 15 - (13)) - ((1024 + 15 - (13)) / (16))*(16)) * 4]} __asm {add edi, [esp + 4 + ((1024 + 7 - (13)) - ((1024 + 7 - (13)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp}  __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (13 + 6)) - ((1024 + 7 - (13 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (13 + 6)) - ((1024 + 7 - (13 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (13 + 4)) - ((1024 + 7 - (13 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (13 + 4)) - ((1024 + 7 - (13 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (13)) - ((1024 + 7 - (13)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (14 + 2)) - ((1024 + 7 - (14 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (14 + 1)) - ((1024 + 7 - (14 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (14 + 1)) - ((1024 + 7 - (14 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25} __asm {add edx, [esi + (14) * 4]} __asm {add edx, [esp + 4 + 8 * 4 + ((1024 + 15 - (14)) - ((1024 + 15 - (14)) / (16))*(16)) * 4]} __asm {add edx, [esp + 4 + ((1024 + 7 - (14)) - ((1024 + 7 - (14)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp}  __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (14 + 6)) - ((1024 + 7 - (14 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (14 + 6)) - ((1024 + 7 - (14 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (14 + 4)) - ((1024 + 7 - (14 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (14 + 4)) - ((1024 + 7 - (14 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (14)) - ((1024 + 7 - (14)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (15 + 2)) - ((1024 + 7 - (15 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (15 + 1)) - ((1024 + 7 - (15 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (15 + 1)) - ((1024 + 7 - (15 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25} __asm {add edi, [esi + (15) * 4]} __asm {add edi, [esp + 4 + 8 * 4 + ((1024 + 15 - (15)) - ((1024 + 15 - (15)) / (16))*(16)) * 4]} __asm {add edi, [esp + 4 + ((1024 + 7 - (15)) - ((1024 + 7 - (15)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp}  __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (15 + 6)) - ((1024 + 7 - (15 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (15 + 6)) - ((1024 + 7 - (15 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (15 + 4)) - ((1024 + 7 - (15 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (15 + 4)) - ((1024 + 7 - (15 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (15)) - ((1024 + 7 - (15)) / (8))*(8)) * 4], ecx}

		__asm {label1:}
		__asm {add esi, 4 * 16}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (0 + 2)) - ((1024 + 7 - (0 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (0 + 1)) - ((1024 + 7 - (0 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (0 + 1)) - ((1024 + 7 - (0 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25}  __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((0) - 2)) - ((1024 + 15 - ((0) - 2)) / (16))*(16)) * 4]} __asm {mov edi, [esp + 4 + 8 * 4 + ((1024 + 15 - ((0) - 15)) - ((1024 + 15 - ((0) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((0) - 7)) - ((1024 + 15 - ((0) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edi} __asm {shr ebp, 3} __asm {ror edi, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (0)) - ((1024 + 15 - (0)) / (16))*(16)) * 4]} __asm {xor ebp, edi} __asm {add edx, [esi + (0) * 4]} __asm {ror edi, 11} __asm {add edx, [esp + 4 + ((1024 + 7 - (0)) - ((1024 + 7 - (0)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (0)) - ((1024 + 15 - (0)) / (16))*(16)) * 4], ebp} __asm {add edx, ebp} __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (0 + 6)) - ((1024 + 7 - (0 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (0 + 6)) - ((1024 + 7 - (0 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (0 + 4)) - ((1024 + 7 - (0 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (0 + 4)) - ((1024 + 7 - (0 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (0)) - ((1024 + 7 - (0)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (1 + 2)) - ((1024 + 7 - (1 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (1 + 1)) - ((1024 + 7 - (1 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (1 + 1)) - ((1024 + 7 - (1 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25}  __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((1) - 2)) - ((1024 + 15 - ((1) - 2)) / (16))*(16)) * 4]} __asm {mov edx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((1) - 15)) - ((1024 + 15 - ((1) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((1) - 7)) - ((1024 + 15 - ((1) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edx} __asm {shr ebp, 3} __asm {ror edx, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (1)) - ((1024 + 15 - (1)) / (16))*(16)) * 4]} __asm {xor ebp, edx} __asm {add edi, [esi + (1) * 4]} __asm {ror edx, 11} __asm {add edi, [esp + 4 + ((1024 + 7 - (1)) - ((1024 + 7 - (1)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (1)) - ((1024 + 15 - (1)) / (16))*(16)) * 4], ebp} __asm {add edi, ebp} __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (1 + 6)) - ((1024 + 7 - (1 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (1 + 6)) - ((1024 + 7 - (1 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (1 + 4)) - ((1024 + 7 - (1 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (1 + 4)) - ((1024 + 7 - (1 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (1)) - ((1024 + 7 - (1)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (2 + 2)) - ((1024 + 7 - (2 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (2 + 1)) - ((1024 + 7 - (2 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (2 + 1)) - ((1024 + 7 - (2 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25}  __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((2) - 2)) - ((1024 + 15 - ((2) - 2)) / (16))*(16)) * 4]} __asm {mov edi, [esp + 4 + 8 * 4 + ((1024 + 15 - ((2) - 15)) - ((1024 + 15 - ((2) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((2) - 7)) - ((1024 + 15 - ((2) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edi} __asm {shr ebp, 3} __asm {ror edi, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (2)) - ((1024 + 15 - (2)) / (16))*(16)) * 4]} __asm {xor ebp, edi} __asm {add edx, [esi + (2) * 4]} __asm {ror edi, 11} __asm {add edx, [esp + 4 + ((1024 + 7 - (2)) - ((1024 + 7 - (2)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (2)) - ((1024 + 15 - (2)) / (16))*(16)) * 4], ebp} __asm {add edx, ebp} __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (2 + 6)) - ((1024 + 7 - (2 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (2 + 6)) - ((1024 + 7 - (2 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (2 + 4)) - ((1024 + 7 - (2 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (2 + 4)) - ((1024 + 7 - (2 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (2)) - ((1024 + 7 - (2)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (3 + 2)) - ((1024 + 7 - (3 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (3 + 1)) - ((1024 + 7 - (3 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (3 + 1)) - ((1024 + 7 - (3 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25}  __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((3) - 2)) - ((1024 + 15 - ((3) - 2)) / (16))*(16)) * 4]} __asm {mov edx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((3) - 15)) - ((1024 + 15 - ((3) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((3) - 7)) - ((1024 + 15 - ((3) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edx} __asm {shr ebp, 3} __asm {ror edx, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (3)) - ((1024 + 15 - (3)) / (16))*(16)) * 4]} __asm {xor ebp, edx} __asm {add edi, [esi + (3) * 4]} __asm {ror edx, 11} __asm {add edi, [esp + 4 + ((1024 + 7 - (3)) - ((1024 + 7 - (3)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (3)) - ((1024 + 15 - (3)) / (16))*(16)) * 4], ebp} __asm {add edi, ebp} __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (3 + 6)) - ((1024 + 7 - (3 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (3 + 6)) - ((1024 + 7 - (3 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (3 + 4)) - ((1024 + 7 - (3 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (3 + 4)) - ((1024 + 7 - (3 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (3)) - ((1024 + 7 - (3)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (4 + 2)) - ((1024 + 7 - (4 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (4 + 1)) - ((1024 + 7 - (4 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (4 + 1)) - ((1024 + 7 - (4 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25}  __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((4) - 2)) - ((1024 + 15 - ((4) - 2)) / (16))*(16)) * 4]} __asm {mov edi, [esp + 4 + 8 * 4 + ((1024 + 15 - ((4) - 15)) - ((1024 + 15 - ((4) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((4) - 7)) - ((1024 + 15 - ((4) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edi} __asm {shr ebp, 3} __asm {ror edi, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (4)) - ((1024 + 15 - (4)) / (16))*(16)) * 4]} __asm {xor ebp, edi} __asm {add edx, [esi + (4) * 4]} __asm {ror edi, 11} __asm {add edx, [esp + 4 + ((1024 + 7 - (4)) - ((1024 + 7 - (4)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (4)) - ((1024 + 15 - (4)) / (16))*(16)) * 4], ebp} __asm {add edx, ebp} __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (4 + 6)) - ((1024 + 7 - (4 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (4 + 6)) - ((1024 + 7 - (4 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (4 + 4)) - ((1024 + 7 - (4 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (4 + 4)) - ((1024 + 7 - (4 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (4)) - ((1024 + 7 - (4)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (5 + 2)) - ((1024 + 7 - (5 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (5 + 1)) - ((1024 + 7 - (5 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (5 + 1)) - ((1024 + 7 - (5 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25}  __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((5) - 2)) - ((1024 + 15 - ((5) - 2)) / (16))*(16)) * 4]} __asm {mov edx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((5) - 15)) - ((1024 + 15 - ((5) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((5) - 7)) - ((1024 + 15 - ((5) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edx} __asm {shr ebp, 3} __asm {ror edx, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (5)) - ((1024 + 15 - (5)) / (16))*(16)) * 4]} __asm {xor ebp, edx} __asm {add edi, [esi + (5) * 4]} __asm {ror edx, 11} __asm {add edi, [esp + 4 + ((1024 + 7 - (5)) - ((1024 + 7 - (5)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (5)) - ((1024 + 15 - (5)) / (16))*(16)) * 4], ebp} __asm {add edi, ebp} __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (5 + 6)) - ((1024 + 7 - (5 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (5 + 6)) - ((1024 + 7 - (5 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (5 + 4)) - ((1024 + 7 - (5 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (5 + 4)) - ((1024 + 7 - (5 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (5)) - ((1024 + 7 - (5)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (6 + 2)) - ((1024 + 7 - (6 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (6 + 1)) - ((1024 + 7 - (6 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (6 + 1)) - ((1024 + 7 - (6 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25}  __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((6) - 2)) - ((1024 + 15 - ((6) - 2)) / (16))*(16)) * 4]} __asm {mov edi, [esp + 4 + 8 * 4 + ((1024 + 15 - ((6) - 15)) - ((1024 + 15 - ((6) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((6) - 7)) - ((1024 + 15 - ((6) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edi} __asm {shr ebp, 3} __asm {ror edi, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (6)) - ((1024 + 15 - (6)) / (16))*(16)) * 4]} __asm {xor ebp, edi} __asm {add edx, [esi + (6) * 4]} __asm {ror edi, 11} __asm {add edx, [esp + 4 + ((1024 + 7 - (6)) - ((1024 + 7 - (6)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (6)) - ((1024 + 15 - (6)) / (16))*(16)) * 4], ebp} __asm {add edx, ebp} __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (6 + 6)) - ((1024 + 7 - (6 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (6 + 6)) - ((1024 + 7 - (6 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (6 + 4)) - ((1024 + 7 - (6 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (6 + 4)) - ((1024 + 7 - (6 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (6)) - ((1024 + 7 - (6)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (7 + 2)) - ((1024 + 7 - (7 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (7 + 1)) - ((1024 + 7 - (7 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (7 + 1)) - ((1024 + 7 - (7 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25}  __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((7) - 2)) - ((1024 + 15 - ((7) - 2)) / (16))*(16)) * 4]} __asm {mov edx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((7) - 15)) - ((1024 + 15 - ((7) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((7) - 7)) - ((1024 + 15 - ((7) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edx} __asm {shr ebp, 3} __asm {ror edx, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (7)) - ((1024 + 15 - (7)) / (16))*(16)) * 4]} __asm {xor ebp, edx} __asm {add edi, [esi + (7) * 4]} __asm {ror edx, 11} __asm {add edi, [esp + 4 + ((1024 + 7 - (7)) - ((1024 + 7 - (7)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (7)) - ((1024 + 15 - (7)) / (16))*(16)) * 4], ebp} __asm {add edi, ebp} __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (7 + 6)) - ((1024 + 7 - (7 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (7 + 6)) - ((1024 + 7 - (7 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (7 + 4)) - ((1024 + 7 - (7 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (7 + 4)) - ((1024 + 7 - (7 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (7)) - ((1024 + 7 - (7)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (8 + 2)) - ((1024 + 7 - (8 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (8 + 1)) - ((1024 + 7 - (8 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (8 + 1)) - ((1024 + 7 - (8 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25}  __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((8) - 2)) - ((1024 + 15 - ((8) - 2)) / (16))*(16)) * 4]} __asm {mov edi, [esp + 4 + 8 * 4 + ((1024 + 15 - ((8) - 15)) - ((1024 + 15 - ((8) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((8) - 7)) - ((1024 + 15 - ((8) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edi} __asm {shr ebp, 3} __asm {ror edi, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (8)) - ((1024 + 15 - (8)) / (16))*(16)) * 4]} __asm {xor ebp, edi} __asm {add edx, [esi + (8) * 4]} __asm {ror edi, 11} __asm {add edx, [esp + 4 + ((1024 + 7 - (8)) - ((1024 + 7 - (8)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (8)) - ((1024 + 15 - (8)) / (16))*(16)) * 4], ebp} __asm {add edx, ebp} __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (8 + 6)) - ((1024 + 7 - (8 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (8 + 6)) - ((1024 + 7 - (8 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (8 + 4)) - ((1024 + 7 - (8 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (8 + 4)) - ((1024 + 7 - (8 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (8)) - ((1024 + 7 - (8)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (9 + 2)) - ((1024 + 7 - (9 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (9 + 1)) - ((1024 + 7 - (9 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (9 + 1)) - ((1024 + 7 - (9 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25}  __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((9) - 2)) - ((1024 + 15 - ((9) - 2)) / (16))*(16)) * 4]} __asm {mov edx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((9) - 15)) - ((1024 + 15 - ((9) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((9) - 7)) - ((1024 + 15 - ((9) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edx} __asm {shr ebp, 3} __asm {ror edx, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (9)) - ((1024 + 15 - (9)) / (16))*(16)) * 4]} __asm {xor ebp, edx} __asm {add edi, [esi + (9) * 4]} __asm {ror edx, 11} __asm {add edi, [esp + 4 + ((1024 + 7 - (9)) - ((1024 + 7 - (9)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (9)) - ((1024 + 15 - (9)) / (16))*(16)) * 4], ebp} __asm {add edi, ebp} __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (9 + 6)) - ((1024 + 7 - (9 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (9 + 6)) - ((1024 + 7 - (9 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (9 + 4)) - ((1024 + 7 - (9 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (9 + 4)) - ((1024 + 7 - (9 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (9)) - ((1024 + 7 - (9)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (10 + 2)) - ((1024 + 7 - (10 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (10 + 1)) - ((1024 + 7 - (10 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (10 + 1)) - ((1024 + 7 - (10 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25}  __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((10) - 2)) - ((1024 + 15 - ((10) - 2)) / (16))*(16)) * 4]} __asm {mov edi, [esp + 4 + 8 * 4 + ((1024 + 15 - ((10) - 15)) - ((1024 + 15 - ((10) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((10) - 7)) - ((1024 + 15 - ((10) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edi} __asm {shr ebp, 3} __asm {ror edi, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (10)) - ((1024 + 15 - (10)) / (16))*(16)) * 4]} __asm {xor ebp, edi} __asm {add edx, [esi + (10) * 4]} __asm {ror edi, 11} __asm {add edx, [esp + 4 + ((1024 + 7 - (10)) - ((1024 + 7 - (10)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (10)) - ((1024 + 15 - (10)) / (16))*(16)) * 4], ebp} __asm {add edx, ebp} __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (10 + 6)) - ((1024 + 7 - (10 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (10 + 6)) - ((1024 + 7 - (10 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (10 + 4)) - ((1024 + 7 - (10 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (10 + 4)) - ((1024 + 7 - (10 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (10)) - ((1024 + 7 - (10)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (11 + 2)) - ((1024 + 7 - (11 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (11 + 1)) - ((1024 + 7 - (11 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (11 + 1)) - ((1024 + 7 - (11 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25}  __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((11) - 2)) - ((1024 + 15 - ((11) - 2)) / (16))*(16)) * 4]} __asm {mov edx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((11) - 15)) - ((1024 + 15 - ((11) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((11) - 7)) - ((1024 + 15 - ((11) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edx} __asm {shr ebp, 3} __asm {ror edx, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (11)) - ((1024 + 15 - (11)) / (16))*(16)) * 4]} __asm {xor ebp, edx} __asm {add edi, [esi + (11) * 4]} __asm {ror edx, 11} __asm {add edi, [esp + 4 + ((1024 + 7 - (11)) - ((1024 + 7 - (11)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (11)) - ((1024 + 15 - (11)) / (16))*(16)) * 4], ebp} __asm {add edi, ebp} __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (11 + 6)) - ((1024 + 7 - (11 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (11 + 6)) - ((1024 + 7 - (11 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (11 + 4)) - ((1024 + 7 - (11 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (11 + 4)) - ((1024 + 7 - (11 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (11)) - ((1024 + 7 - (11)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (12 + 2)) - ((1024 + 7 - (12 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (12 + 1)) - ((1024 + 7 - (12 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (12 + 1)) - ((1024 + 7 - (12 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25}  __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((12) - 2)) - ((1024 + 15 - ((12) - 2)) / (16))*(16)) * 4]} __asm {mov edi, [esp + 4 + 8 * 4 + ((1024 + 15 - ((12) - 15)) - ((1024 + 15 - ((12) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((12) - 7)) - ((1024 + 15 - ((12) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edi} __asm {shr ebp, 3} __asm {ror edi, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (12)) - ((1024 + 15 - (12)) / (16))*(16)) * 4]} __asm {xor ebp, edi} __asm {add edx, [esi + (12) * 4]} __asm {ror edi, 11} __asm {add edx, [esp + 4 + ((1024 + 7 - (12)) - ((1024 + 7 - (12)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (12)) - ((1024 + 15 - (12)) / (16))*(16)) * 4], ebp} __asm {add edx, ebp} __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (12 + 6)) - ((1024 + 7 - (12 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (12 + 6)) - ((1024 + 7 - (12 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (12 + 4)) - ((1024 + 7 - (12 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (12 + 4)) - ((1024 + 7 - (12 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (12)) - ((1024 + 7 - (12)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (13 + 2)) - ((1024 + 7 - (13 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (13 + 1)) - ((1024 + 7 - (13 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (13 + 1)) - ((1024 + 7 - (13 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25}  __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((13) - 2)) - ((1024 + 15 - ((13) - 2)) / (16))*(16)) * 4]} __asm {mov edx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((13) - 15)) - ((1024 + 15 - ((13) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((13) - 7)) - ((1024 + 15 - ((13) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edx} __asm {shr ebp, 3} __asm {ror edx, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (13)) - ((1024 + 15 - (13)) / (16))*(16)) * 4]} __asm {xor ebp, edx} __asm {add edi, [esi + (13) * 4]} __asm {ror edx, 11} __asm {add edi, [esp + 4 + ((1024 + 7 - (13)) - ((1024 + 7 - (13)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (13)) - ((1024 + 15 - (13)) / (16))*(16)) * 4], ebp} __asm {add edi, ebp} __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (13 + 6)) - ((1024 + 7 - (13 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (13 + 6)) - ((1024 + 7 - (13 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (13 + 4)) - ((1024 + 7 - (13 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (13 + 4)) - ((1024 + 7 - (13 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (13)) - ((1024 + 7 - (13)) / (8))*(8)) * 4], ecx}
		__asm {mov edx, [esp + 4 + ((1024 + 7 - (14 + 2)) - ((1024 + 7 - (14 + 2)) / (8))*(8)) * 4]} __asm {xor edx, [esp + 4 + ((1024 + 7 - (14 + 1)) - ((1024 + 7 - (14 + 1)) / (8))*(8)) * 4]} __asm {and edx, edi} __asm {xor edx, [esp + 4 + ((1024 + 7 - (14 + 1)) - ((1024 + 7 - (14 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edi} __asm {ror edi, 6} __asm {ror ebp, 25}  __asm {xor ebp, edi} __asm {ror edi, 5} __asm {xor ebp, edi} __asm {add edx, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((14) - 2)) - ((1024 + 15 - ((14) - 2)) / (16))*(16)) * 4]} __asm {mov edi, [esp + 4 + 8 * 4 + ((1024 + 15 - ((14) - 15)) - ((1024 + 15 - ((14) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((14) - 7)) - ((1024 + 15 - ((14) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edi} __asm {shr ebp, 3} __asm {ror edi, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (14)) - ((1024 + 15 - (14)) / (16))*(16)) * 4]} __asm {xor ebp, edi} __asm {add edx, [esi + (14) * 4]} __asm {ror edi, 11} __asm {add edx, [esp + 4 + ((1024 + 7 - (14)) - ((1024 + 7 - (14)) / (8))*(8)) * 4]} __asm {xor ebp, edi} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (14)) - ((1024 + 15 - (14)) / (16))*(16)) * 4], ebp} __asm {add edx, ebp} __asm {mov ebx, ecx} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (14 + 6)) - ((1024 + 7 - (14 + 6)) / (8))*(8)) * 4]} __asm {and eax, ecx} __asm {xor eax, [esp + 4 + ((1024 + 7 - (14 + 6)) - ((1024 + 7 - (14 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add eax, edx} __asm {add edx, [esp + 4 + ((1024 + 7 - (14 + 4)) - ((1024 + 7 - (14 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (14 + 4)) - ((1024 + 7 - (14 + 4)) / (8))*(8)) * 4], edx} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add eax, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (14)) - ((1024 + 7 - (14)) / (8))*(8)) * 4], eax}
		__asm {mov edi, [esp + 4 + ((1024 + 7 - (15 + 2)) - ((1024 + 7 - (15 + 2)) / (8))*(8)) * 4]} __asm {xor edi, [esp + 4 + ((1024 + 7 - (15 + 1)) - ((1024 + 7 - (15 + 1)) / (8))*(8)) * 4]} __asm {and edi, edx} __asm {xor edi, [esp + 4 + ((1024 + 7 - (15 + 1)) - ((1024 + 7 - (15 + 1)) / (8))*(8)) * 4]} __asm {mov ebp, edx} __asm {ror edx, 6} __asm {ror ebp, 25}  __asm {xor ebp, edx} __asm {ror edx, 5} __asm {xor ebp, edx} __asm {add edi, ebp} __asm {mov ebp, [esp + 4 + 8 * 4 + ((1024 + 15 - ((15) - 2)) - ((1024 + 15 - ((15) - 2)) / (16))*(16)) * 4]} __asm {mov edx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((15) - 15)) - ((1024 + 15 - ((15) - 15)) / (16))*(16)) * 4]} __asm {mov ebx, ebp} __asm {shr ebp, 10} __asm {ror ebx, 17} __asm {xor ebp, ebx} __asm {ror ebx, 2} __asm {xor ebx, ebp} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - ((15) - 7)) - ((1024 + 15 - ((15) - 7)) / (16))*(16)) * 4]} __asm {mov ebp, edx} __asm {shr ebp, 3} __asm {ror edx, 7} __asm {add ebx, [esp + 4 + 8 * 4 + ((1024 + 15 - (15)) - ((1024 + 15 - (15)) / (16))*(16)) * 4]} __asm {xor ebp, edx} __asm {add edi, [esi + (15) * 4]} __asm {ror edx, 11} __asm {add edi, [esp + 4 + ((1024 + 7 - (15)) - ((1024 + 7 - (15)) / (8))*(8)) * 4]} __asm {xor ebp, edx} __asm {add ebp, ebx} __asm {mov[esp + 4 + 8 * 4 + ((1024 + 15 - (15)) - ((1024 + 15 - (15)) / (16))*(16)) * 4], ebp} __asm {add edi, ebp} __asm {mov ebx, eax} __asm {xor eax, [esp + 4 + ((1024 + 7 - (15 + 6)) - ((1024 + 7 - (15 + 6)) / (8))*(8)) * 4]} __asm {and ecx, eax} __asm {xor ecx, [esp + 4 + ((1024 + 7 - (15 + 6)) - ((1024 + 7 - (15 + 6)) / (8))*(8)) * 4]} __asm {mov ebp, ebx} __asm {ror ebx, 2} __asm {add ecx, edi} __asm {add edi, [esp + 4 + ((1024 + 7 - (15 + 4)) - ((1024 + 7 - (15 + 4)) / (8))*(8)) * 4]} __asm {mov[esp + 4 + ((1024 + 7 - (15 + 4)) - ((1024 + 7 - (15 + 4)) / (8))*(8)) * 4], edi} __asm {ror ebp, 22} __asm {xor ebp, ebx} __asm {ror ebx, 11} __asm {xor ebp, ebx} __asm {add ecx, ebp} __asm {mov[esp + 4 + ((1024 + 7 - (15)) - ((1024 + 7 - (15)) / (8))*(8)) * 4], ecx}
		__asm {cmp esi, [esp + 4 + 8 * 4 + 16 * 4 + 0 * 4]}
		__asm {jb label1}

		__asm {mov edx, [esp + 4 + 8 * 4 + 16 * 4 + 2 * 4]}
		__asm {add edx, 64}
		__asm {mov ebp, [esp + 4 + 8 * 4 + 16 * 4 + 1 * 4]}
		__asm {mov[esp + 4 + 8 * 4 + 16 * 4 + 2 * 4], edx}
		__asm {test DWORD PTR[esp + 4 + 8 * 4 + 16 * 4 + 0 * 4], 1}
		__asm {jz label4}
		__asm {movdqa xmm1, [ebp + 1 * 16]}
		__asm {movdqa xmm0, [ebp + 0 * 16]}
		__asm {paddd xmm1, [esp + 4 + ((1024 + 7 - (0 + 3)) - ((1024 + 7 - (0 + 3)) / (8))*(8)) * 4]}
		__asm {paddd xmm0, [esp + 4 + ((1024 + 7 - (0 + 7)) - ((1024 + 7 - (0 + 7)) / (8))*(8)) * 4]}
		__asm {movdqa[ebp + 1 * 16], xmm1}
		__asm {movdqa[ebp + 0 * 16], xmm0}
		__asm {cmp edx, [esp + 4 + 8 * 4 + 16 * 4 + 3 * 4]}
		__asm {jb label0}
		__asm {jmp label5}
		__asm {label4:}
		__asm {add[ebp + 0 * 4], ecx}
		__asm {add[ebp + 4 * 4], edi}
		__asm {mov eax, [esp + 4 + ((1024 + 7 - (0 + 6)) - ((1024 + 7 - (0 + 6)) / (8))*(8)) * 4]}
		__asm {mov ebx, [esp + 4 + ((1024 + 7 - (0 + 5)) - ((1024 + 7 - (0 + 5)) / (8))*(8)) * 4]}
		__asm {mov ecx, [esp + 4 + ((1024 + 7 - (0 + 4)) - ((1024 + 7 - (0 + 4)) / (8))*(8)) * 4]}
		__asm {add[ebp + 1 * 4], eax}
		__asm {add[ebp + 2 * 4], ebx}
		__asm {add[ebp + 3 * 4], ecx}
		__asm {mov eax, [esp + 4 + ((1024 + 7 - (0 + 2)) - ((1024 + 7 - (0 + 2)) / (8))*(8)) * 4]}
		__asm {mov ebx, [esp + 4 + ((1024 + 7 - (0 + 1)) - ((1024 + 7 - (0 + 1)) / (8))*(8)) * 4]}
		__asm {mov ecx, [esp + 4 + ((1024 + 7 - (0)) - ((1024 + 7 - (0)) / (8))*(8)) * 4]}
		__asm {add[ebp + 5 * 4], eax}
		__asm {add[ebp + 6 * 4], ebx}
		__asm {add[ebp + 7 * 4], ecx}
		__asm {mov ecx, ebp}
		__asm {cmp edx, [esp + 4 + 8 * 4 + 16 * 4 + 3 * 4]}
		__asm {jb label2}

		__asm {label5:}
		__asm {pop esp}
		__asm {pop ebp}
	}
#endif
