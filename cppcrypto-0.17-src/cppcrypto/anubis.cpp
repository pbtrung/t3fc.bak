/*
This code is written by kerukuro for cppcrypto library (http://cppcrypto.sourceforge.net/)
and released into public domain.
*/

#include "anubis.h"
#include "portability.h"
#include <memory.h>
#include <stdlib.h>
#include <stdio.h>

namespace cppcrypto
{
	static const uint32_t U[10][256] = {
		{
			0xbabababaU, 0x54545454U, 0x2f2f2f2fU, 0x74747474U, 0x53535353U, 0xd3d3d3d3U, 0xd2d2d2d2U, 0x4d4d4d4dU,
			0x50505050U, 0xacacacacU, 0x8d8d8d8dU, 0xbfbfbfbfU, 0x70707070U, 0x52525252U, 0x9a9a9a9aU, 0x4c4c4c4cU,
			0xeaeaeaeaU, 0xd5d5d5d5U, 0x97979797U, 0xd1d1d1d1U, 0x33333333U, 0x51515151U, 0x5b5b5b5bU, 0xa6a6a6a6U,
			0xdedededeU, 0x48484848U, 0xa8a8a8a8U, 0x99999999U, 0xdbdbdbdbU, 0x32323232U, 0xb7b7b7b7U, 0xfcfcfcfcU,
			0xe3e3e3e3U, 0x9e9e9e9eU, 0x91919191U, 0x9b9b9b9bU, 0xe2e2e2e2U, 0xbbbbbbbbU, 0x41414141U, 0x6e6e6e6eU,
			0xa5a5a5a5U, 0xcbcbcbcbU, 0x6b6b6b6bU, 0x95959595U, 0xa1a1a1a1U, 0xf3f3f3f3U, 0xb1b1b1b1U, 0x02020202U,
			0xccccccccU, 0xc4c4c4c4U, 0x1d1d1d1dU, 0x14141414U, 0xc3c3c3c3U, 0x63636363U, 0xdadadadaU, 0x5d5d5d5dU,
			0x5f5f5f5fU, 0xdcdcdcdcU, 0x7d7d7d7dU, 0xcdcdcdcdU, 0x7f7f7f7fU, 0x5a5a5a5aU, 0x6c6c6c6cU, 0x5c5c5c5cU,
			0xf7f7f7f7U, 0x26262626U, 0xffffffffU, 0xededededU, 0xe8e8e8e8U, 0x9d9d9d9dU, 0x6f6f6f6fU, 0x8e8e8e8eU,
			0x19191919U, 0xa0a0a0a0U, 0xf0f0f0f0U, 0x89898989U, 0x0f0f0f0fU, 0x07070707U, 0xafafafafU, 0xfbfbfbfbU,
			0x08080808U, 0x15151515U, 0x0d0d0d0dU, 0x04040404U, 0x01010101U, 0x64646464U, 0xdfdfdfdfU, 0x76767676U,
			0x79797979U, 0xddddddddU, 0x3d3d3d3dU, 0x16161616U, 0x3f3f3f3fU, 0x37373737U, 0x6d6d6d6dU, 0x38383838U,
			0xb9b9b9b9U, 0x73737373U, 0xe9e9e9e9U, 0x35353535U, 0x55555555U, 0x71717171U, 0x7b7b7b7bU, 0x8c8c8c8cU,
			0x72727272U, 0x88888888U, 0xf6f6f6f6U, 0x2a2a2a2aU, 0x3e3e3e3eU, 0x5e5e5e5eU, 0x27272727U, 0x46464646U,
			0x0c0c0c0cU, 0x65656565U, 0x68686868U, 0x61616161U, 0x03030303U, 0xc1c1c1c1U, 0x57575757U, 0xd6d6d6d6U,
			0xd9d9d9d9U, 0x58585858U, 0xd8d8d8d8U, 0x66666666U, 0xd7d7d7d7U, 0x3a3a3a3aU, 0xc8c8c8c8U, 0x3c3c3c3cU,
			0xfafafafaU, 0x96969696U, 0xa7a7a7a7U, 0x98989898U, 0xececececU, 0xb8b8b8b8U, 0xc7c7c7c7U, 0xaeaeaeaeU,
			0x69696969U, 0x4b4b4b4bU, 0xababababU, 0xa9a9a9a9U, 0x67676767U, 0x0a0a0a0aU, 0x47474747U, 0xf2f2f2f2U,
			0xb5b5b5b5U, 0x22222222U, 0xe5e5e5e5U, 0xeeeeeeeeU, 0xbebebebeU, 0x2b2b2b2bU, 0x81818181U, 0x12121212U,
			0x83838383U, 0x1b1b1b1bU, 0x0e0e0e0eU, 0x23232323U, 0xf5f5f5f5U, 0x45454545U, 0x21212121U, 0xcecececeU,
			0x49494949U, 0x2c2c2c2cU, 0xf9f9f9f9U, 0xe6e6e6e6U, 0xb6b6b6b6U, 0x28282828U, 0x17171717U, 0x82828282U,
			0x1a1a1a1aU, 0x8b8b8b8bU, 0xfefefefeU, 0x8a8a8a8aU, 0x09090909U, 0xc9c9c9c9U, 0x87878787U, 0x4e4e4e4eU,
			0xe1e1e1e1U, 0x2e2e2e2eU, 0xe4e4e4e4U, 0xe0e0e0e0U, 0xebebebebU, 0x90909090U, 0xa4a4a4a4U, 0x1e1e1e1eU,
			0x85858585U, 0x60606060U, 0x00000000U, 0x25252525U, 0xf4f4f4f4U, 0xf1f1f1f1U, 0x94949494U, 0x0b0b0b0bU,
			0xe7e7e7e7U, 0x75757575U, 0xefefefefU, 0x34343434U, 0x31313131U, 0xd4d4d4d4U, 0xd0d0d0d0U, 0x86868686U,
			0x7e7e7e7eU, 0xadadadadU, 0xfdfdfdfdU, 0x29292929U, 0x30303030U, 0x3b3b3b3bU, 0x9f9f9f9fU, 0xf8f8f8f8U,
			0xc6c6c6c6U, 0x13131313U, 0x06060606U, 0x05050505U, 0xc5c5c5c5U, 0x11111111U, 0x77777777U, 0x7c7c7c7cU,
			0x7a7a7a7aU, 0x78787878U, 0x36363636U, 0x1c1c1c1cU, 0x39393939U, 0x59595959U, 0x18181818U, 0x56565656U,
			0xb3b3b3b3U, 0xb0b0b0b0U, 0x24242424U, 0x20202020U, 0xb2b2b2b2U, 0x92929292U, 0xa3a3a3a3U, 0xc0c0c0c0U,
			0x44444444U, 0x62626262U, 0x10101010U, 0xb4b4b4b4U, 0x84848484U, 0x43434343U, 0x93939393U, 0xc2c2c2c2U,
			0x4a4a4a4aU, 0xbdbdbdbdU, 0x8f8f8f8fU, 0x2d2d2d2dU, 0xbcbcbcbcU, 0x9c9c9c9cU, 0x6a6a6a6aU, 0x40404040U,
			0xcfcfcfcfU, 0xa2a2a2a2U, 0x80808080U, 0x4f4f4f4fU, 0x1f1f1f1fU, 0xcacacacaU, 0xaaaaaaaaU, 0x42424242U
		},
		{
			0xba69bbb9U, 0x54a8e59aU, 0x2f5ee265U, 0x74e82587U, 0x53a6f7a2U, 0xd3bbd0d6U, 0xd2b9d6deU, 0x4d9ab352U,
			0x50a0fdbaU, 0xac45cf09U, 0x8d07091cU, 0xbf63a591U, 0x70e03da7U, 0x52a4f1aaU, 0x9a297ba4U, 0x4c98b55aU,
			0xeac94603U, 0xd5b7c4e6U, 0x973355ccU, 0xd1bfdcc6U, 0x3366aa85U, 0x51a2fbb2U, 0x5bb6c7e2U, 0xa651f359U,
			0xdea1febeU, 0x4890ad7aU, 0xa84dd729U, 0x992f71bcU, 0xdbabe096U, 0x3264ac8dU, 0xb77395d1U, 0xfce532b3U,
			0xe3db704bU, 0x9e216384U, 0x913f41fcU, 0x9b2b7dacU, 0xe2d97643U, 0xbb6bbdb1U, 0x41829b32U, 0x6edc7957U,
			0xa557f941U, 0xcb8b8016U, 0x6bd6677fU, 0x953759dcU, 0xa15fe161U, 0xf3fb10cbU, 0xb17f81e1U, 0x02040c10U,
			0xcc85922eU, 0xc495a26eU, 0x1d3a4ee8U, 0x142878a0U, 0xc39bb056U, 0x63c6573fU, 0xdaa9e69eU, 0x5dbad3d2U,
			0x5fbedfc2U, 0xdca5f2aeU, 0x7dfa13cfU, 0xcd879426U, 0x7ffe1fdfU, 0x5ab4c1eaU, 0x6cd87547U, 0x5cb8d5daU,
			0xf7f308ebU, 0x264cd42dU, 0xffe338abU, 0xedc7543bU, 0xe8cd4a13U, 0x9d27699cU, 0x6fde7f5fU, 0x8e010304U,
			0x193256c8U, 0xa05de769U, 0xf0fd1ad3U, 0x890f113cU, 0x0f1e2278U, 0x070e1238U, 0xaf43c511U, 0xfbeb208bU,
			0x08103040U, 0x152a7ea8U, 0x0d1a2e68U, 0x04081820U, 0x01020608U, 0x64c84507U, 0xdfa3f8b6U, 0x76ec2997U,
			0x79f20befU, 0xdda7f4a6U, 0x3d7a8ef5U, 0x162c74b0U, 0x3f7e82e5U, 0x376eb2a5U, 0x6dda734fU, 0x387090ddU,
			0xb96fb1a1U, 0x73e637bfU, 0xe9cf4c1bU, 0x356abeb5U, 0x55aae392U, 0x71e23bafU, 0x7bf607ffU, 0x8c050f14U,
			0x72e431b7U, 0x880d1734U, 0xf6f10ee3U, 0x2a54fc4dU, 0x3e7c84edU, 0x5ebcd9caU, 0x274ed225U, 0x468c890aU,
			0x0c182860U, 0x65ca430fU, 0x68d06d67U, 0x61c25b2fU, 0x03060a18U, 0xc19fbc46U, 0x57aeef82U, 0xd6b1cefeU,
			0xd9afec86U, 0x58b0cdfaU, 0xd8adea8eU, 0x66cc4917U, 0xd7b3c8f6U, 0x3a749ccdU, 0xc88d8a0eU, 0x3c7888fdU,
			0xfae92683U, 0x963153c4U, 0xa753f551U, 0x982d77b4U, 0xecc55233U, 0xb86db7a9U, 0xc793a876U, 0xae41c319U,
			0x69d26b6fU, 0x4b96a762U, 0xab4bdd31U, 0xa94fd121U, 0x67ce4f1fU, 0x0a143c50U, 0x478e8f02U, 0xf2f916c3U,
			0xb57799c1U, 0x2244cc0dU, 0xe5d7647bU, 0xeec15e23U, 0xbe61a399U, 0x2b56fa45U, 0x811f217cU, 0x12246c90U,
			0x831b2d6cU, 0x1b365ad8U, 0x0e1c2470U, 0x2346ca05U, 0xf5f704fbU, 0x458a8312U, 0x2142c615U, 0xce819e3eU,
			0x4992ab72U, 0x2c58e87dU, 0xf9ef2c9bU, 0xe6d16e63U, 0xb67193d9U, 0x2850f05dU, 0x172e72b8U, 0x82192b64U,
			0x1a345cd0U, 0x8b0b1d2cU, 0xfee13ea3U, 0x8a091b24U, 0x09123648U, 0xc98f8c06U, 0x8713354cU, 0x4e9cb94aU,
			0xe1df7c5bU, 0x2e5ce46dU, 0xe4d56273U, 0xe0dd7a53U, 0xebcb400bU, 0x903d47f4U, 0xa455ff49U, 0x1e3c44f0U,
			0x8517395cU, 0x60c05d27U, 0x00000000U, 0x254ade35U, 0xf4f502f3U, 0xf1ff1cdbU, 0x94355fd4U, 0x0b163a58U,
			0xe7d3686bU, 0x75ea238fU, 0xefc3582bU, 0x3468b8bdU, 0x3162a695U, 0xd4b5c2eeU, 0xd0bddaceU, 0x86113344U,
			0x7efc19d7U, 0xad47c901U, 0xfde734bbU, 0x2952f655U, 0x3060a09dU, 0x3b769ac5U, 0x9f23658cU, 0xf8ed2a93U,
			0xc691ae7eU, 0x13266a98U, 0x060c1430U, 0x050a1e28U, 0xc597a466U, 0x11226688U, 0x77ee2f9fU, 0x7cf815c7U,
			0x7af401f7U, 0x78f00de7U, 0x366cb4adU, 0x1c3848e0U, 0x397296d5U, 0x59b2cbf2U, 0x183050c0U, 0x56ace98aU,
			0xb37b8df1U, 0xb07d87e9U, 0x2448d83dU, 0x2040c01dU, 0xb2798bf9U, 0x92394be4U, 0xa35bed71U, 0xc09dba4eU,
			0x4488851aU, 0x62c45137U, 0x10206080U, 0xb4759fc9U, 0x84153f54U, 0x43869722U, 0x933b4decU, 0xc299b65eU,
			0x4a94a16aU, 0xbd67a981U, 0x8f03050cU, 0x2d5aee75U, 0xbc65af89U, 0x9c256f94U, 0x6ad46177U, 0x40809d3aU,
			0xcf839836U, 0xa259eb79U, 0x801d2774U, 0x4f9ebf42U, 0x1f3e42f8U, 0xca89861eU, 0xaa49db39U, 0x4284912aU
		},
		{
			0xbad2bda1U, 0x544d64a4U, 0x2fbc760fU, 0x74cdde4cU, 0x53510879U, 0xd36bdafeU, 0xd26fcebeU, 0x4d298daaU,
			0x505d34b9U, 0xac8a9848U, 0x8d0e36e0U, 0xbfc6f9fcU, 0x70dd8e51U, 0x52551c39U, 0x9a520749U, 0x4c2d99eaU,
			0xea8f8918U, 0xd573a263U, 0x9766e32eU, 0xd163f27eU, 0x33ccdb5cU, 0x515920f9U, 0x5b71a843U, 0xa6a210f2U,
			0xde5f3e99U, 0x483dc9f7U, 0xa89ac855U, 0x995e3b89U, 0xdb4b7ac4U, 0x32c8cf1cU, 0xb7e659c6U, 0xfcd7acf1U,
			0xe3ab3d62U, 0x9e425754U, 0x917e9bb3U, 0x9b561309U, 0xe2af2922U, 0xbbd6a9e1U, 0x41197d8dU, 0x6ea50b82U,
			0xa5ae2c32U, 0xcb0b27b0U, 0x6bb14fdfU, 0x956ecbaeU, 0xa1be7c2fU, 0xf3eb6016U, 0xb1fe215bU, 0x02082880U,
			0xcc174b6dU, 0xc437eb57U, 0x1d74b913U, 0x14500d69U, 0xc32b878aU, 0x6391efe5U, 0xda4f6e84U, 0x5d69d0deU,
			0x5f61f85eU, 0xdc571619U, 0x7de96a36U, 0xcd135f2dU, 0x7fe142b6U, 0x5a75bc03U, 0x6cad2302U, 0x5c6dc49eU,
			0xf7fb300bU, 0x2698c275U, 0xffdb9031U, 0xed93e5c5U, 0xe887a198U, 0x9d4e6b94U, 0x6fa11fc2U, 0x8e020a20U,
			0x1964e90eU, 0xa0ba686fU, 0xf0e75cd6U, 0x891e66fdU, 0x0f3ccce7U, 0x071c6cddU, 0xaf86a488U, 0xfbcbc02cU,
			0x0820a03aU, 0x15541929U, 0x0d34e467U, 0x0410501dU, 0x01041440U, 0x648d8338U, 0xdf5b2ad9U, 0x76c5f6ccU,
			0x79f93a2bU, 0xdd530259U, 0x3df403fbU, 0x165825e9U, 0x3ffc2b7bU, 0x37dc8b41U, 0x6da93742U, 0x38e047a6U,
			0xb9de8161U, 0x73d1b291U, 0xe983b5d8U, 0x35d4a3c1U, 0x554970e4U, 0x71d99a11U, 0x7bf112abU, 0x8c0a22a0U,
			0x72d5a6d1U, 0x881a72bdU, 0xf6ff244bU, 0x2aa83252U, 0x3ef83f3bU, 0x5e65ec1eU, 0x279cd635U, 0x46051150U,
			0x0c30f027U, 0x65899778U, 0x68bd731fU, 0x6199c765U, 0x030c3cc0U, 0xc123af0aU, 0x57415864U, 0xd67f9ea3U,
			0xd9435244U, 0x587d9483U, 0xd8474604U, 0x6685abb8U, 0xd77b8ae3U, 0x3ae86f26U, 0xc8071b70U, 0x3cf017bbU,
			0xfacfd46cU, 0x9662f76eU, 0xa7a604b2U, 0x985a2fc9U, 0xec97f185U, 0xb8da9521U, 0xc73bd797U, 0xae82b0c8U,
			0x69b9675fU, 0x4b31f537U, 0xab96f495U, 0xa99edc15U, 0x6781bff8U, 0x0a2888baU, 0x47010510U, 0xf2ef7456U,
			0xb5ee7146U, 0x22889268U, 0xe5b345ffU, 0xee9fd905U, 0xbec2edbcU, 0x2bac2612U, 0x813ec6c7U, 0x124875f4U,
			0x8336ee47U, 0x1b6cc18eU, 0x0e38d8a7U, 0x238c8628U, 0xf5f3188bU, 0x45092d90U, 0x2184aea8U, 0xce1f63edU,
			0x4939ddb7U, 0x2cb04acfU, 0xf9c3e8acU, 0xe6bf793fU, 0xb6e24d86U, 0x28a01ad2U, 0x175c31a9U, 0x8232fa07U,
			0x1a68d5ceU, 0x8b164e7dU, 0xfedf8471U, 0x8a125a3dU, 0x0924b47aU, 0xc9030f30U, 0x8726be5aU, 0x4e25b16aU,
			0xe1a315e2U, 0x2eb8624fU, 0xe4b751bfU, 0xe0a701a2U, 0xeb8b9d58U, 0x907a8ff3U, 0xa4aa3872U, 0x1e7885d3U,
			0x852e96daU, 0x609dd325U, 0x00000000U, 0x2594feb5U, 0xf4f70ccbU, 0xf1e34896U, 0x946adfeeU, 0x0b2c9cfaU,
			0xe7bb6d7fU, 0x75c9ca0cU, 0xef9bcd45U, 0x34d0b781U, 0x31c4f3dcU, 0xd477b623U, 0xd067e63eU, 0x8622aa1aU,
			0x7ee556f6U, 0xad8e8c08U, 0xfdd3b8b1U, 0x29a40e92U, 0x30c0e79cU, 0x3bec7b66U, 0x9f464314U, 0xf8c7fcecU,
			0xc63fc3d7U, 0x134c61b4U, 0x0618789dU, 0x0514445dU, 0xc533ff17U, 0x11444934U, 0x77c1e28cU, 0x7ced7e76U,
			0x7af506ebU, 0x78fd2e6bU, 0x36d89f01U, 0x1c70ad53U, 0x39e453e6U, 0x597980c3U, 0x1860fd4eU, 0x56454c24U,
			0xb3f609dbU, 0xb0fa351bU, 0x2490eaf5U, 0x2080bae8U, 0xb2f21d9bU, 0x9272a773U, 0xa3b654afU, 0xc027bb4aU,
			0x440d39d0U, 0x6295fba5U, 0x10405d74U, 0xb4ea6506U, 0x842a829aU, 0x4311550dU, 0x9376b333U, 0xc22f93caU,
			0x4a35e177U, 0xbdced17cU, 0x8f061e60U, 0x2db45e8fU, 0xbccac53cU, 0x9c4a7fd4U, 0x6ab55b9fU, 0x401d69cdU,
			0xcf1b77adU, 0xa2b240efU, 0x803ad287U, 0x4f21a52aU, 0x1f7c9193U, 0xca0f33f0U, 0xaa92e0d5U, 0x4215414dU
		},
		{
			0xbab9a961U, 0x549a4549U, 0x2f652978U, 0x7487fe5aU, 0x53a230efU, 0xd3d6e6a3U, 0xd2de9e99U, 0x4d520939U,
			0x50bab8a1U, 0xac09777aU, 0x8d1cb453U, 0xbf912cb3U, 0x70a703b2U, 0x52aa48d5U, 0x9aa41272U, 0x4c5a7103U,
			0xea0311c0U, 0xd5e6eb3fU, 0x97cc706dU, 0xd1c616d7U, 0x3385e0daU, 0x51b2c09bU, 0x5be2d722U, 0xa65960c3U,
			0xdebe84bcU, 0x487a8cebU, 0xa8298a92U, 0x99bc9a3cU, 0xdb96016eU, 0x328d98e0U, 0xb7d1cb7eU, 0xfcb3cfdbU,
			0xe34b8e37U, 0x9e84ef9aU, 0x91fc7df1U, 0x9bac6a48U, 0xe243f60dU, 0xbbb1d15bU, 0x4132131cU, 0x6e573a64U,
			0xa541e88dU, 0xcb16d2e9U, 0x6b7fbfb6U, 0x95dc8019U, 0xa1611565U, 0xf3cb5db0U, 0xb1e1c6e2U, 0x0210f074U,
			0xcc2ea74fU, 0xc46e4082U, 0x1de8b198U, 0x14a02e6fU, 0xc3563524U, 0x633f587bU, 0xda9e7954U, 0x5dd2dabeU,
			0x5fc22acaU, 0xdcae74c8U, 0x7dcf61adU, 0xcd26df75U, 0x7fdf91d9U, 0x5aeaaf18U, 0x6c47ca10U, 0x5cdaa284U,
			0xf7eba058U, 0x262db68fU, 0xffab4795U, 0xed3b6466U, 0xe813e1b4U, 0x9d9c67d4U, 0x6f5f425eU, 0x8e043c1dU,
			0x19c84c70U, 0xa0696d5fU, 0xf0d3d5feU, 0x893c49bbU, 0x0f78926bU, 0x073875a6U, 0xaf11ff34U, 0xfb8bba7dU,
			0x0840e7cdU, 0x15a85655U, 0x0d68621fU, 0x0420fde8U, 0x0108783aU, 0x64072dddU, 0xdfb6fc86U, 0x76970e2eU,
			0x79ef9c45U, 0xdda60cf2U, 0x3df50a8bU, 0x16b0de1bU, 0x3fe5faffU, 0x37a51d32U, 0x6d4fb22aU, 0x38dd8f59U,
			0xb9a1212fU, 0x73bf8bfcU, 0xe91b998eU, 0x35b5ed46U, 0x55923d73U, 0x71af7b88U, 0x7bff6c31U, 0x8c14cc69U,
			0x72b7f3c6U, 0x88343181U, 0xf6e3d862U, 0x2a4dacaaU, 0x3eed82c5U, 0x5eca52f0U, 0x2725ceb5U, 0x460a66baU,
			0x0c601a25U, 0x650f55e7U, 0x686737f8U, 0x612fa80fU, 0x0318884eU, 0xc146c550U, 0x5782cd07U, 0xd6fe6371U,
			0xd986f11aU, 0x58fa5f6cU, 0xd88e8920U, 0x6617dda9U, 0xd7f61b4bU, 0x3acd7f2dU, 0xc80e5aa7U, 0x3cfd72b1U,
			0xfa83c247U, 0x96c40857U, 0xa75118f9U, 0x98b4e206U, 0xec331c5cU, 0xb8a95915U, 0xc776c8ccU, 0xae19870eU,
			0x696f4fc2U, 0x4b6204a5U, 0xab3102dcU, 0xa921f2a8U, 0x671fa593U, 0x0a5017b9U, 0x47021e80U, 0xf2c3258aU,
			0xb5c13b0aU, 0x220d4b67U, 0xe57b83abU, 0xee23ec28U, 0xbe995489U, 0x2b45d490U, 0x817cae76U, 0x129023f3U,
			0x836c5e02U, 0x1bd8bc04U, 0x0e70ea51U, 0x2305335dU, 0xf5fb502cU, 0x4512eef4U, 0x2115c329U, 0xce3e573bU,
			0x4972f4d1U, 0x2c7da136U, 0xf99b4a09U, 0xe6630be5U, 0xb6d9b344U, 0x285d5cdeU, 0x17b8a621U, 0x82642638U,
			0x1ad0c43eU, 0x8b2cb9cfU, 0xfea33fafU, 0x8a24c1f5U, 0x09489ff7U, 0xc906229dU, 0x874ca3eaU, 0x4e4a8177U,
			0xe15b7e43U, 0x2e6d5142U, 0xe473fb91U, 0xe0530679U, 0xeb0b69faU, 0x90f405cbU, 0xa44990b7U, 0x1ef039d6U,
			0x855c539eU, 0x6027d035U, 0x00000000U, 0x25353ec1U, 0xf4f32816U, 0xf1dbadc4U, 0x94d4f823U, 0x0b586f83U,
			0xe76b73dfU, 0x758f8660U, 0xef2b9412U, 0x34bd957cU, 0x319510aeU, 0xd4ee9305U, 0xd0ce6eedU, 0x8644dbd0U,
			0x7ed7e9e3U, 0xad010f40U, 0xfdbbb7e1U, 0x295524e4U, 0x309d6894U, 0x3bc50717U, 0x9f8c97a0U, 0xf8933233U,
			0xc67eb0f6U, 0x13985bc9U, 0x06300d9cU, 0x052885d2U, 0xc56638b8U, 0x1188abbdU, 0x779f7614U, 0x7cc71997U,
			0x7af7140bU, 0x78e7e47fU, 0x36ad6508U, 0x1ce0c9a2U, 0x39d5f763U, 0x59f22756U, 0x18c0344aU, 0x568ab53dU,
			0xb3f13696U, 0xb0e9bed8U, 0x243d46fbU, 0x201dbb13U, 0xb2f94eacU, 0x92e4f5bfU, 0xa371e511U, 0xc04ebd6aU,
			0x441a96ceU, 0x62372041U, 0x1080d387U, 0xb4c94330U, 0x84542ba4U, 0x4322e368U, 0x93ec8d85U, 0xc25e4d1eU,
			0x4a6a7c9fU, 0xbd81dcc7U, 0x8f0c4427U, 0x2d75d90cU, 0xbc89a4fdU, 0x9c941feeU, 0x6a77c78cU, 0x403a6b26U,
			0xcf362f01U, 0xa2799d2bU, 0x8074d64cU, 0x4f42f94dU, 0x1ff841ecU, 0xca1eaad3U, 0xaa397ae6U, 0x422a9b52U
		},
		{
			0xba6fd12fU, 0x54298372U, 0x2fcaf6e7U, 0x74133eeaU, 0x5359a02bU, 0xd3b16e71U, 0xd2a163bcU, 0x4da436d5U,
			0x5069b761U, 0xac122ff7U, 0x8d389fa2U, 0xbf3fe8f1U, 0x70530af9U, 0x5249ade6U, 0x9a556cb7U, 0x4cb43b18U,
			0xea06664eU, 0xd5d140e5U, 0x97853d4fU, 0xd19174f6U, 0x33177a9eU, 0x5179baacU, 0x5bd9c80dU, 0xa6b25d56U,
			0xde613f89U, 0x48f40f0bU, 0xa8521be4U, 0x99657bfdU, 0xdb310657U, 0x32077753U, 0xb7bf80d7U, 0xfc7b9896U,
			0xe39603a5U, 0x9e1558a4U, 0x91e513dbU, 0x9b45617aU, 0xe2860e68U, 0xbb7fdce2U, 0x41646ae0U, 0x6eae9c07U,
			0xa5824a1cU, 0xcb2cd61bU, 0x6bfea5d9U, 0x95a527c8U, 0xa1c27e0fU, 0xf38bd3e9U, 0xb1dfae43U, 0x02201a87U,
			0xcc5cf542U, 0xc4dc9d64U, 0x1dcd81b4U, 0x145de45fU, 0xc3acbe3dU, 0x637ecdffU, 0xda210b9aU, 0x5db9e699U,
			0x5f99fc1eU, 0xdc41250eU, 0x7d835b01U, 0xcd4cf88fU, 0x7fa34186U, 0x5ac9c5c0U, 0x6c8e8680U, 0x5ca9eb54U,
			0xf7cbe7faU, 0x265a930cU, 0xff4b8fdcU, 0xed764517U, 0xe8267cc9U, 0x9d254feeU, 0x6fbe91caU, 0x8e0888e8U,
			0x198db5a7U, 0xa0d273c2U, 0xf0bbc4a3U, 0x8978abb1U, 0x0ff04b7fU, 0x07702359U, 0xaf2238bdU, 0xfb0bbbcfU,
			0x08806826U, 0x154de992U, 0x0dd051f8U, 0x04403413U, 0x01100dcdU, 0x640eeea6U, 0xdf713244U, 0x7633246dU,
			0x79c36f12U, 0xdd5128c3U, 0x3df73c2cU, 0x167dfed8U, 0x3fd726abU, 0x37574e8dU, 0x6d9e8b4dU, 0x38a705f2U,
			0xb95fc665U, 0x73631db3U, 0xe9367104U, 0x3577540aU, 0x55398ebfU, 0x71430734U, 0x7be37595U, 0x8c28926fU,
			0x7273107eU, 0x8868a67cU, 0xf6dbea37U, 0x2a9acf39U, 0x3ec72b66U, 0x5e89f1d3U, 0x274a9ec1U, 0x461449b9U,
			0x0cc05c35U, 0x651ee36bU, 0x68ceb293U, 0x615ed778U, 0x0330174aU, 0xc18ca4baU, 0x57199438U, 0xd6e157afU,
			0xd9111cd0U, 0x58e9df47U, 0xd801111dU, 0x662ef421U, 0xd7f15a62U, 0x3a871f75U, 0xc81cc151U, 0x3ce731e1U,
			0xfa1bb602U, 0x96953082U, 0xa7a2509bU, 0x98757630U, 0xec6648daU, 0xb84fcba8U, 0xc7ec8a2eU, 0xae323570U,
			0x69debf5eU, 0x4bc41841U, 0xab620caeU, 0xa9421629U, 0x673ef9ecU, 0x0aa072a1U, 0x47044474U, 0xf29bde24U,
			0xb59f9a50U, 0x221aa71fU, 0xe5f62d31U, 0xee46525dU, 0xbe2fe53cU, 0x2b8ac2f4U, 0x81f8c397U, 0x123dcacbU,
			0x83d8d910U, 0x1badaf20U, 0x0ee046b2U, 0x230aaad2U, 0xf5ebfd7dU, 0x45245ef3U, 0x212ab055U, 0xce7cefc5U,
			0x49e402c6U, 0x2cfae1adU, 0xf92ba148U, 0xe6c63a7bU, 0xb6af8d1aU, 0x28bad5beU, 0x176df315U, 0x82c8d4ddU,
			0x1abda2edU, 0x8b58b136U, 0xfe5b8211U, 0x8a48bcfbU, 0x099065ebU, 0xc90ccc9cU, 0x8798ed03U, 0x4e94219fU,
			0xe1b61922U, 0x2edafb2aU, 0xe4e620fcU, 0xe0a614efU, 0xeb166b83U, 0x90f51e16U, 0xa49247d1U, 0x1efd96feU,
			0x85b8f784U, 0x604edab5U, 0x00000000U, 0x256a8446U, 0xf4fbf0b0U, 0xf1abc96eU, 0x94b52a05U, 0x0bb07f6cU,
			0xe7d637b6U, 0x75033327U, 0xef565f90U, 0x346759c7U, 0x31376019U, 0xd4c14d28U, 0xd081793bU, 0x8688e0ceU,
			0x7eb34c4bU, 0xad02223aU, 0xfd6b955bU, 0x29aad873U, 0x30276dd4U, 0x3b9712b8U, 0x9f055569U, 0xf83bac85U,
			0xc6fc87e3U, 0x132dc706U, 0x06602e94U, 0x055039deU, 0xc5cc90a9U, 0x110ddd81U, 0x772329a0U, 0x7c9356ccU,
			0x7af37858U, 0x78d362dfU, 0x36474340U, 0x1cdd8c79U, 0x39b7083fU, 0x59f9d28aU, 0x189db86aU, 0x560999f5U,
			0xb3ffb4c4U, 0xb0cfa38eU, 0x247a898bU, 0x203abd98U, 0xb2efb909U, 0x92d50491U, 0xa3e26488U, 0xc09ca977U,
			0x4434533eU, 0x626ec032U, 0x101dd04cU, 0xb48f979dU, 0x84a8fa49U, 0x43447067U, 0x93c5095cU, 0xc2bcb3f0U,
			0x4ad4158cU, 0xbd1ff276U, 0x8f188525U, 0x2deaec60U, 0xbc0fffbbU, 0x9c354223U, 0x6aeea814U, 0x4074672dU,
			0xcf6ce208U, 0xa2f26945U, 0x80e8ce5aU, 0x4f842c52U, 0x1fed9b33U, 0xca3cdbd6U, 0xaa720163U, 0x42547daaU
		},
		{
			0xbadedc65U, 0x54522db7U, 0x2f890e6bU, 0x74268403U, 0x53b2e745U, 0xd37f79afU, 0xd25f5789U, 0x4d55b4e6U,
			0x50d2952fU, 0xac24e2ebU, 0x8d706579U, 0xbf7e4adbU, 0x70a63c9bU, 0x5292c963U, 0x9aaa75d1U, 0x4c759ac0U,
			0xea0c494aU, 0xd5bf9d7bU, 0x97178e42U, 0xd13f25e3U, 0x332e0184U, 0x51f2bb09U, 0x5baf8a68U, 0xa679d38aU,
			0xdec2823cU, 0x48f52258U, 0xa8a45a73U, 0x99ca07bbU, 0xdb621482U, 0x320e2fa2U, 0xb76327f6U, 0xfcf677c4U,
			0xe3310a41U, 0x9e2acd49U, 0x91d76a96U, 0x9b8a5bf7U, 0xe2112467U, 0xbbfef243U, 0x41c86153U, 0x6e416f38U,
			0xa519a1e0U, 0xcb58ced8U, 0x6be1f986U, 0x9557d20eU, 0xa1991978U, 0xf30bd01bU, 0xb1a3c322U, 0x02405c4cU,
			0xccb8042aU, 0xc4a56907U, 0x1d8721c9U, 0x14ba62c2U, 0xc345a3f5U, 0x63fc94abU, 0xda423aa4U, 0x5d6f6ebcU,
			0x5f2f32f0U, 0xdc82de70U, 0x7d1bc708U, 0xcd982a0cU, 0x7f5b9b44U, 0x5a8fa44eU, 0x6c013374U, 0x5c4f409aU,
			0xf78b6883U, 0x26b44d60U, 0xff9605aeU, 0xedec83b8U, 0xe84c1506U, 0x9d4abf23U, 0x6f61411eU, 0x8e101713U,
			0x19079951U, 0xa0b9375eU, 0xf06ba271U, 0x89f0dde1U, 0x0ffda7dfU, 0x07e0caf2U, 0xaf449081U, 0xfb16bd36U,
			0x081d6d2dU, 0x159a4ce4U, 0x0dbdfb93U, 0x0480b898U, 0x01202e26U, 0x641c5e59U, 0xdfe2ac1aU, 0x7666d84fU,
			0x799b7f90U, 0xdda2f056U, 0x3df3887dU, 0x16fa3e8eU, 0x3fb3d431U, 0x37aeb91cU, 0x6d211d52U, 0x38531ec3U,
			0xb9beae0fU, 0x73c64ef1U, 0xe96c3b20U, 0x35eee550U, 0x55720391U, 0x718612bdU, 0x7bdb23dcU, 0x8c504b5fU,
			0x72e660d7U, 0x88d0f3c7U, 0xf6ab46a5U, 0x2a2998d5U, 0x3e93fa17U, 0x5e0f1cd6U, 0x27946346U, 0x4628aba1U,
			0x0c9dd5b5U, 0x653c707fU, 0x68818becU, 0x61bcc8e7U, 0x0360726aU, 0xc105ffb9U, 0x57325fddU, 0xd6dfef11U,
			0xd92248ceU, 0x58cff802U, 0xd80266e8U, 0x665c0215U, 0xd7ffc137U, 0x3a13428fU, 0xc838bcb2U, 0x3cd3a65bU,
			0xfa369310U, 0x9637a064U, 0xa759fdacU, 0x98ea299dU, 0xecccad9eU, 0xb89e8029U, 0xc7c51b6dU, 0xae64bea7U,
			0x69a1a5caU, 0x4b955032U, 0xabc42819U, 0xa9847455U, 0x677c2c33U, 0x0a5d3161U, 0x47088587U, 0xf22bfe3dU,
			0xb5237bbaU, 0x2234f5f8U, 0xe5f1ee95U, 0xee8cf1d2U, 0xbe5e64fdU, 0x2b09b6f3U, 0x81edb0ccU, 0x127a8616U,
			0x83adec80U, 0x1b47c51dU, 0x0edd89f9U, 0x2314dbdeU, 0xf5cb34cfU, 0x4548d9cbU, 0x21548792U, 0xcef85866U,
			0x49d50c7eU, 0x2ce97c01U, 0xf956e17aU, 0xe6919cffU, 0xb64309d0U, 0x2869c499U, 0x17da10a8U, 0x828dc2a6U,
			0x1a67eb3bU, 0x8bb081adU, 0xfeb62b88U, 0x8a90af8bU, 0x093d430bU, 0xc9189294U, 0x872d5418U, 0x4e35c68cU,
			0xe171560dU, 0x2ea9204dU, 0xe4d1c0b3U, 0xe051782bU, 0xeb2c676cU, 0x90f744b0U, 0xa4398fc6U, 0x1ee753a3U,
			0x856d0854U, 0x609ce6c1U, 0x00000000U, 0x25d43f0aU, 0xf4eb1ae9U, 0xf14b8c57U, 0x9477fc28U, 0x0b7d1f47U,
			0xe7b1b2d9U, 0x7506aa25U, 0xefacdff4U, 0x34cecb76U, 0x316e5dc8U, 0xd49fb35dU, 0xd01f0bc5U, 0x860d7a3eU,
			0x7e7bb562U, 0xad04cccdU, 0xfdd659e2U, 0x2949eabfU, 0x304e73eeU, 0x3b336ca9U, 0x9f0ae36fU, 0xf876cf5cU,
			0xc6e5354bU, 0x135aa830U, 0x06c0e4d4U, 0x05a096beU, 0xc5854721U, 0x111af47cU, 0x7746f669U, 0x7c3be92eU,
			0x7afb0dfaU, 0x78bb51b6U, 0x368e973aU, 0x1ca70fefU, 0x397330e5U, 0x59efd624U, 0x1827b777U, 0x561271fbU,
			0xb3e39f6eU, 0xb083ed04U, 0x24f4112cU, 0x2074a9b4U, 0xb2c3b148U, 0x92b718fcU, 0xa3d94534U, 0xc025d19fU,
			0x4468f7edU, 0x62dcba8dU, 0x103ada5aU, 0xb403559cU, 0x844d2672U, 0x43883d1fU, 0x939736daU, 0xc2658dd3U,
			0x4ab57e14U, 0xbd3e1697U, 0x8f303935U, 0x2dc95227U, 0xbc1e38b1U, 0x9c6a9105U, 0x6ac1d7a0U, 0x40e84f75U,
			0xcfd87640U, 0xa2f96b12U, 0x80cd9eeaU, 0x4f15e8aaU, 0x1fc77d85U, 0xca78e0feU, 0xaae4063fU, 0x42a81339U
		},
		{
			0xbaa1f20fU, 0x54a4eed1U, 0x2f0f247fU, 0x744c3f18U, 0x53796812U, 0xd3fe0b11U, 0xd2beef3cU, 0x4daa9f63U,
			0x50b95965U, 0xac48760bU, 0x8de043efU, 0xbffca196U, 0x705188acU, 0x52398c3fU, 0x9a4923c6U, 0x4cea7b4eU,
			0xea18ab6aU, 0xd56369ffU, 0x972e032aU, 0xd17ede4bU, 0x335c0654U, 0x51f9bd48U, 0x5b431b67U, 0xa6f2d024U,
			0xde992bfdU, 0x48f7ccfaU, 0xa855c1bfU, 0x998912b1U, 0xdbc47864U, 0x321ce279U, 0xb7c6d2e3U, 0xfcf12f6eU,
			0xe3623c32U, 0x9e549472U, 0x91b361c4U, 0x9b09c7ebU, 0xe222d81fU, 0xbbe11622U, 0x418d5ba2U, 0x6e827fddU,
			0xa532e153U, 0xcbb09e8eU, 0x6bdf2c44U, 0x95aed670U, 0xa12f56e7U, 0xf316dad8U, 0xb15bb00dU, 0x0280d55aU,
			0xcc6d184dU, 0xc4576b38U, 0x1d13c606U, 0x1469515eU, 0xc38aedfbU, 0x63e55f31U, 0xda849c49U, 0x5dde7989U,
			0x5f5eacd3U, 0xdc19fea7U, 0x7d36a840U, 0xcd2dfc60U, 0x7fb67d1aU, 0x5a03ff4aU, 0x6c02aa87U, 0x5c9e9da4U,
			0xf70b6d6cU, 0x2675b327U, 0xff311e19U, 0xedc52da9U, 0xe8987e30U, 0x9d94a505U, 0x6fc29bf0U, 0x8e207298U,
			0x190e71b2U, 0xa06fb2caU, 0xf0d6ebafU, 0x89fdf45bU, 0x0fe7f5b6U, 0x07dd86c3U, 0xaf88477cU, 0xfb2ca9adU,
			0x083a7375U, 0x1529b573U, 0x0d6720ecU, 0x041db7b4U, 0x0140e42dU, 0x6438d9f2U, 0xdfd9cfd0U, 0x76ccea42U,
			0x792b1ff4U, 0xdd591a8aU, 0x3dfb17cfU, 0x16e98404U, 0x3f7bc295U, 0x3741b1e0U, 0x6d424eaaU, 0x38a64456U,
			0xb961c378U, 0x7391b9dbU, 0xe9d89a1dU, 0x35c164baU, 0x55e40afcU, 0x71116c81U, 0x7babcaaeU, 0x8ca0a7c2U,
			0x72d15df6U, 0x88bd1076U, 0xf64b8941U, 0x2a5277e6U, 0x3e3b26b8U, 0x5e1e48feU, 0x2735570aU, 0x4650dd61U,
			0x0c27c4c1U, 0x65783ddfU, 0x681f1d33U, 0x61658a6bU, 0x03c03177U, 0xc10a38a1U, 0x5764dfa6U, 0xd6a35888U,
			0xd944ad3eU, 0x58832a10U, 0xd8044913U, 0x66b80ca8U, 0xd7e3bca5U, 0x3a26910cU, 0xc870aff9U, 0x3cbbf3e2U,
			0xfa6c4d80U, 0x966ee707U, 0xa7b23409U, 0x98c9f69cU, 0xec85c984U, 0xb8212755U, 0xc7975a4fU, 0xaec8a351U,
			0x695ff91eU, 0x4b37fd8dU, 0xab95f0c8U, 0xa9152592U, 0x67f8e885U, 0x0abaa62fU, 0x4710394cU, 0xf2563ef5U,
			0xb54607b9U, 0x22680493U, 0xe5ff5edcU, 0xee051cdeU, 0xbebc45bbU, 0x2b1293cbU, 0x81c7872eU, 0x12f433b0U,
			0x83475274U, 0x1b8ea4e8U, 0x0ea7119bU, 0x2328e0beU, 0xf58bb836U, 0x4590ec16U, 0x21a835e4U, 0xceedcd17U,
			0x49b728d7U, 0x2ccf1508U, 0xf9ac7cf7U, 0xe63f6fabU, 0xb68636ceU, 0x28d2a2bcU, 0x17a96029U, 0x8207b659U,
			0x1ace40c5U, 0x8b7d2101U, 0xfe71fa34U, 0x8a3dc52cU, 0x097a9758U, 0xc9304bd4U, 0x875ae5c0U, 0x4e6aae14U,
			0xe1e2e968U, 0x2e4fc052U, 0xe4bfbaf1U, 0xe0a20d45U, 0xeb584f47U, 0x90f385e9U, 0xa472057eU, 0x1ed3f771U,
			0x85da309aU, 0x60256e46U, 0x00000000U, 0x25b58250U, 0xf4cb5c1bU, 0xf1960f82U, 0x94ee325dU, 0x0bfa4202U,
			0xe77f8b86U, 0x750cdb35U, 0xef45f8f3U, 0x34818097U, 0x31dcd30eU, 0xd4238dd2U, 0xd03e3a66U, 0x861a01edU,
			0x7ef69937U, 0xad089226U, 0xfdb1cb43U, 0x29924691U, 0x309c3723U, 0x3b667521U, 0x9f14705fU, 0xf8ec98daU,
			0xc6d7be62U, 0x13b4d79dU, 0x069d62eeU, 0x055d5399U, 0xc5178f15U, 0x113402c7U, 0x778c0e6fU, 0x7c764c6dU,
			0x7aeb2e83U, 0x786bfbd9U, 0x360155cdU, 0x1c53222bU, 0x39e6a07bU, 0x59c3ce3dU, 0x184e959fU, 0x56243b8bU,
			0xb3db6557U, 0xb01b5420U, 0x24f5667dU, 0x20e8d1c9U, 0xb29b817aU, 0x927350b3U, 0xa3af83bdU, 0xc04adc8cU,
			0x44d0083bU, 0x62a5bb1cU, 0x1074e6eaU, 0xb406e394U, 0x849ad4b7U, 0x430d8ef8U, 0x9333b49eU, 0xc2ca09d6U,
			0x4a7719a0U, 0xbd7c74ccU, 0x8f6096b5U, 0x2d8ff125U, 0xbc3c90e1U, 0x9cd44128U, 0x6a9fc869U, 0x40cdbf8fU,
			0xcfad293aU, 0xa2ef6790U, 0x80876303U, 0x4f2a4a39U, 0x1f93135cU, 0xcaf07aa3U, 0xaad514e5U, 0x424d6ad5U
		},
		{
			0xba5f1678U, 0x54555ec6U, 0x2f1ed8dfU, 0x749882c0U, 0x53f26d90U, 0xd3e13a88U, 0xd26158fdU, 0x4d49653fU,
			0x506fcb0fU, 0xac902958U, 0x8ddd972bU, 0xbfe5e1c4U, 0x70a21709U, 0x52720fe5U, 0x9a92ca7eU, 0x4cc9074aU,
			0xea30dd77U, 0xd5c66babU, 0x975c0a4dU, 0xd1fcfe62U, 0x33b8149aU, 0x51efa97aU, 0x5b865a1fU, 0xa6f9da3dU,
			0xde2ffabbU, 0x48f39283U, 0xa8aabc91U, 0x990f6ce1U, 0xdb950d07U, 0x323876efU, 0xb791d64bU, 0xfcffe257U,
			0xe3c4888dU, 0x9ea85fb7U, 0x917b5b6eU, 0x9b12a80bU, 0xe244eaf8U, 0xbbdf740dU, 0x4107c779U, 0x6e191fa6U,
			0xa5647ca2U, 0xcb7d6304U, 0x6ba3e81aU, 0x9541cea7U, 0xa15ee96bU, 0xf32ce68eU, 0xb1b68768U, 0x021dc4eaU,
			0xccda5052U, 0xc4ae67ddU, 0x1d26ae30U, 0x14d2fbcaU, 0xc309548bU, 0x63d7df95U, 0xda156f72U, 0x5da10b3cU,
			0x5fbccfd6U, 0xdc323e51U, 0x7d6cd73aU, 0xcd5a3227U, 0x7f7113d0U, 0x5a06386aU, 0x6c04db4cU, 0x5c216949U,
			0xf7167347U, 0x26ea8d25U, 0xff6244c8U, 0xed97ee21U, 0xe82d199dU, 0x9d35f928U, 0x6f997dd3U, 0x8e4031b4U,
			0x191c3bf9U, 0xa0de8b1eU, 0xf0b14011U, 0x89e702e2U, 0x0fd304d9U, 0x07a73356U, 0xaf0d8fc7U, 0xfb58d101U,
			0x0874378fU, 0x155299bfU, 0x0dcec033U, 0x043a95c9U, 0x01806275U, 0x6470ecc3U, 0xdfaf98ceU, 0x7685462aU,
			0x795642f3U, 0xddb25c24U, 0x3deb7236U, 0x16cf3f20U, 0x3ff6b6dcU, 0x37828153U, 0x6d84b939U, 0x3851858aU,
			0xb9c2b0e7U, 0x733fb196U, 0xe9ad7be8U, 0x359f45b9U, 0x55d53cb3U, 0x7122757cU, 0x7b4b8619U, 0x8c5df55eU,
			0x72bfd3e3U, 0x88676097U, 0xf6961132U, 0x2aa42f63U, 0x3e76d4a9U, 0x5e3cada3U, 0x276aef50U, 0x46a0f42fU,
			0x0c4ea246U, 0x65f08eb6U, 0x683e4e85U, 0x61ca1b7fU, 0x039da69fU, 0xc1149061U, 0x57c8f859U, 0xd65bcd34U,
			0xd988c9edU, 0x581bfc80U, 0xd808ab98U, 0x666d2829U, 0xd7dbaf41U, 0x3a4c4160U, 0xc8e0c59bU, 0x3c6b1043U,
			0xfad8b374U, 0x96dc6838U, 0xa779b848U, 0x988f0e94U, 0xec178c54U, 0xb842d292U, 0xc733c142U, 0xae8dedb2U,
			0x69be2cf0U, 0x4b6e341cU, 0xab371a0eU, 0xa92adee4U, 0x67ed4a5cU, 0x0a69f365U, 0x4720965aU, 0xf2ac84fbU,
			0xb58c12a1U, 0x22d018ecU, 0xe5e3d9aeU, 0xee0a48beU, 0xbe6583b1U, 0x2b244d16U, 0x8193356dU, 0x12f5aae9U,
			0x838ef187U, 0x1b01ff13U, 0x0e5366acU, 0x23507a99U, 0xf50bb7adU, 0x453d52b0U, 0x214dbe73U, 0xcec794b8U,
			0x4973f0f6U, 0x2c837e40U, 0xf94515ebU, 0xe67e7f31U, 0xb611b43eU, 0x28b9eb89U, 0x174f5d55U, 0x820e93f2U,
			0x1a819d66U, 0x8bfac608U, 0xfee226bdU, 0x8a7aa47dU, 0x09f455faU, 0xc960a7eeU, 0x87b4644eU, 0x4ed4c3a0U,
			0xe1d94c67U, 0x2e9ebaaaU, 0xe463bbdbU, 0xe0592e12U, 0xebb0bf02U, 0x90fb391bU, 0xa4e41ed7U, 0x1ebb08afU,
			0x85a9a0a4U, 0x604a790aU, 0x00000000U, 0x25772bbaU, 0xf48bd5d8U, 0xf1312264U, 0x94c1acd2U, 0x0be99110U,
			0xe7fe1d44U, 0x7518e0b5U, 0xef8a2acbU, 0x341f27ccU, 0x31a5d070U, 0xd44609deU, 0xd07c9c17U, 0x8634063bU,
			0x7ef171a5U, 0xad104b2dU, 0xfd7f8022U, 0x293989fcU, 0x3025b205U, 0x3bcc2315U, 0x9f283dc2U, 0xf8c5779eU,
			0xc6b3a337U, 0x1375c89cU, 0x06275123U, 0x05baf7bcU, 0xc52e05a8U, 0x11680c76U, 0x7705245fU, 0x7cecb54fU,
			0x7acbe46cU, 0x78d62086U, 0x3602e326U, 0x1ca6cc45U, 0x39d1e7ffU, 0x599b9ef5U, 0x189c598cU, 0x56489a2cU,
			0xb3ab4382U, 0xb036e51dU, 0x24f749cfU, 0x20cddc06U, 0xb22b21f7U, 0x92e6fdf1U, 0xa3432d81U, 0xc094f214U,
			0x44bd30c5U, 0x6257bde0U, 0x10e86e03U, 0xb40c70d4U, 0x8429c2d1U, 0x431a0393U, 0x93669f84U, 0xc28936feU,
			0x4aee5669U, 0xbdf8252eU, 0x8fc053c1U, 0x2d031c35U, 0xbc78475bU, 0x9cb59b5dU, 0x6a238a6fU, 0x4087a50cU,
			0xcf47f6cdU, 0xa2c34ff4U, 0x80135718U, 0x4f54a1d5U, 0x1f3b6adaU, 0xcafd0171U, 0xaab7787bU, 0x429a61e6U
		},
		{
			0xbabe74e7U, 0x54aad97eU, 0x2f3ceab6U, 0x742d2b4eU, 0x53f973f4U, 0xd3df9c34U, 0xd2c2cdbbU, 0x4d9243e5U,
			0x50de8078U, 0xac3df6faU, 0x8da75545U, 0xbfd77c6eU, 0x70597248U, 0x52e4227bU, 0x9a3986d7U, 0x4c8f126aU,
			0xea60f49fU, 0xd5916731U, 0x97b83c52U, 0xd1e53e37U, 0x336d78a4U, 0x51c3d1f7U, 0x5b11c1f8U, 0xa6efe6f5U,
			0xde5e26b1U, 0x48fb4b6cU, 0xa849affcU, 0x991e755bU, 0xdb372e38U, 0x3270292bU, 0xb73fce62U, 0xfce37682U,
			0xe395171cU, 0x9e4ddfd1U, 0x91f6c757U, 0x9b24d758U, 0xe2884693U, 0xbba32568U, 0x410ea8efU, 0x6e324259U,
			0xa5c81579U, 0xcbfa5720U, 0x6b5b4ad0U, 0x95829e51U, 0xa1bc4c7fU, 0xf3586e04U, 0xb1713567U, 0x023aa203U,
			0xcca9fdaaU, 0xc4414fa6U, 0x1d4cc39dU, 0x14b9201eU, 0xc312e52cU, 0x63b3f8dcU, 0xda2a7fb7U, 0x5d5f3afdU,
			0x5f6598feU, 0xdc6484b2U, 0x7dd8c8cdU, 0xcdb4ac25U, 0x7fe26aceU, 0x5a0c9077U, 0x6c08e05aU, 0x5c426b72U,
			0xf72c3702U, 0x26c90935U, 0xffc4850eU, 0xed335e15U, 0xe85a569cU, 0x9d6a2c5dU, 0x6f2f13d6U, 0x8e80a6c9U,
			0x19389a9bU, 0xa0a11df0U, 0xf07f9d88U, 0x89d30c43U, 0x0fbb1886U, 0x0753aa8aU, 0xaf1a0576U, 0xfbb0dc08U,
			0x08e8b20cU, 0x15a47191U, 0x0d81ba85U, 0x04745906U, 0x011d518fU, 0x64e05256U, 0xdf43773eU, 0x7617894dU,
			0x79ac91cbU, 0xdd79d53dU, 0x3dcb31adU, 0x1683821dU, 0x3ff193aeU, 0x371921a2U, 0x6d15b1d5U, 0x38a23924U,
			0xb999876bU, 0x737e81c4U, 0xe9470713U, 0x352383a1U, 0x55b788f1U, 0x714423c7U, 0x7b9633c8U, 0x8cba04caU,
			0x7263d04bU, 0x88ce5dccU, 0xf631668dU, 0x2a55e23fU, 0x3eecc221U, 0x5e78c971U, 0x27d458baU, 0x465d0265U,
			0x0c9ceb0aU, 0x65fd03d9U, 0x687cb95cU, 0x61895adfU, 0x0327f38cU, 0xc128472fU, 0x578d2af2U, 0xd6b694bdU,
			0xd90d8c3bU, 0x58363274U, 0xd810ddb4U, 0x66daf055U, 0xd7abc532U, 0x3a989b27U, 0xc8dda4acU, 0x3cd66022U,
			0xfaad8d87U, 0x96a56dddU, 0xa7f2b77aU, 0x980324d4U, 0xec2e0f9aU, 0xb884d6e4U, 0xc766bc2aU, 0xae0754f9U,
			0x6961e8d3U, 0x4bdcb8e0U, 0xab6e5c70U, 0xa954fe73U, 0x67c7a1daU, 0x0ad2100fU, 0x474053eaU, 0xf2453f8bU,
			0xb5056c61U, 0x22bd5033U, 0xe5dbec19U, 0xee14ad99U, 0xbeca2de1U, 0x2b48b3b0U, 0x813bbe4fU, 0x12f7db1bU,
			0x83011c4cU, 0x1b023898U, 0x0ea64909U, 0x23a001bcU, 0xf5169501U, 0x457af1e9U, 0x219aa3bfU, 0xce935fa9U,
			0x49e61ae3U, 0x2c1b193aU, 0xf98a7e0bU, 0xe6fc1f95U, 0xb6229fedU, 0x286f403cU, 0x179ed392U, 0x821c4dc3U,
			0x1a1f6917U, 0x8be9ae40U, 0xfed9d481U, 0x8af4ffcfU, 0x09f5e383U, 0xc9c0f523U, 0x8775454aU, 0x4eb5b069U,
			0xe1afb51fU, 0x2e21bb39U, 0xe4c6bd96U, 0xe0b2e490U, 0xeb7da510U, 0x90eb96d8U, 0xa4d544f6U, 0x1e6b3011U,
			0x854fe749U, 0x60940b50U, 0x00000000U, 0x25eefab9U, 0xf40bc48eU, 0xf162cc07U, 0x949fcfdeU, 0x0bcf4180U,
			0xe7e14e1aU, 0x75307ac1U, 0xef09fc16U, 0x343ed22eU, 0x3157daa7U, 0xd48c36beU, 0xd0f86fb8U, 0x866814c5U,
			0x7eff3b41U, 0xad20a775U, 0xfdfe270dU, 0x297211b3U, 0x304a8b28U, 0x3b85caa8U, 0x9f508e5eU, 0xf8972f84U,
			0xc67beda5U, 0x13ea8a94U, 0x064efb05U, 0x05690889U, 0xc55c1e29U, 0x11d02897U, 0x770ad8c2U, 0x7cc59942U,
			0x7a8b6247U, 0x78b1c044U, 0x3604702dU, 0x1c519212U, 0x39bf68abU, 0x592b63fbU, 0x1825cb14U, 0x56907b7dU,
			0xb34b9764U, 0xb06c64e8U, 0x24f3ab36U, 0x2087f230U, 0xb256c6ebU, 0x92d134dbU, 0xa386ee7cU, 0xc03516a0U,
			0x4467a066U, 0x62aea953U, 0x10cd7918U, 0xb4183deeU, 0x8452b6c6U, 0x43340aecU, 0x93cc6554U, 0xc20fb4a3U,
			0x4ac1e96fU, 0xbdedde6dU, 0x8f9df746U, 0x2d0648b5U, 0xbcf08fe2U, 0x9c777dd2U, 0x6a461b5fU, 0x4013f960U,
			0xcf8e0e26U, 0xa29bbff3U, 0x8026efc0U, 0x4fa8e1e6U, 0x1f76619eU, 0xcae706afU, 0xaa730dffU, 0x42295b63U
		},
		{
			0xba61256bU, 0x5449ecd7U, 0x2f7846d9U, 0x745afa4aU, 0x53ef37f3U, 0xd3a36fbdU, 0xd29994b1U, 0x4d39977bU,
			0x50a127e7U, 0xac7a0e83U, 0x8d53e312U, 0xbfb31557U, 0x70b2317aU, 0x52d5ccffU, 0x9a7233f6U, 0x4c036c77U,
			0xeac0028cU, 0xd53f4f95U, 0x976d88aaU, 0xd1d784a5U, 0x33da0d49U, 0x519bdcebU, 0x5b22bc93U, 0xa6c36efbU,
			0xdebcd4e1U, 0x48eba747U, 0xa892c5b3U, 0x993c23e2U, 0xdb6ee4ddU, 0x32e0f645U, 0xb77e9e37U, 0xfcdb2964U,
			0xe33772e0U, 0x9e9af8c6U, 0x91f1a882U, 0x9b48c8faU, 0xe20d89ecU, 0xbb5bde67U, 0x411cd72bU, 0x6e6491f2U,
			0xa58d7eefU, 0xcbe9ef1dU, 0x6bb6a1ceU, 0x951963b2U, 0xa165b5dfU, 0xf3b07920U, 0xb1e2be1fU, 0x0274eb18U,
			0xcc4f3439U, 0xc482bf59U, 0x1d98b09cU, 0x146fc0f0U, 0xc324647dU, 0x637b2aaeU, 0xda541fd1U, 0x5dbe9cbbU,
			0x5fca77a3U, 0xdcc83ff9U, 0x7dad8a26U, 0xcd75cf35U, 0x7fd9613eU, 0x5a18479fU, 0x6c107aeaU, 0x5c8467b7U,
			0xf758b210U, 0x268f36b5U, 0xff953970U, 0xed66d9a8U, 0xe8b4e994U, 0x9dd4e8d2U, 0x6f5e6afeU, 0x8e1df306U,
			0x19707bacU, 0xa05f4ed3U, 0xf0fe6934U, 0x89bb2822U, 0x0f6b5044U, 0x07a6db24U, 0xaf341e97U, 0xfb7df240U,
			0x08cd8b60U, 0x15553bfcU, 0x0d1fbb5cU, 0x04e8cb30U, 0x013afb0cU, 0x64ddf18aU, 0xdf862fedU, 0x762e1152U,
			0x79454116U, 0xddf2c4f5U, 0x3d8ba601U, 0x161b2be8U, 0x3fff4d19U, 0x3732c679U, 0x6d2a81e6U, 0x3859963dU,
			0xb92f357fU, 0x73fc216eU, 0xe98e1298U, 0x35462d61U, 0x557317dbU, 0x7188ca76U, 0x7b31aa0eU, 0x8c69181eU,
			0x72c6da62U, 0x8881d32eU, 0xf662491cU, 0x2aaa76e5U, 0x3ec5b615U, 0x5ef08cafU, 0x27b5cdb9U, 0x46ba0c0fU,
			0x0c254050U, 0x65e70a86U, 0x68f8b1daU, 0x610fc1b6U, 0x034e1014U, 0xc1508f65U, 0x5707fcc3U, 0xd6715f81U,
			0xd91a0fc5U, 0x586cac87U, 0xd820f4c9U, 0x66a91a92U, 0xd74ba48dU, 0x3a2d7d25U, 0xc8a7ff09U, 0x3cb15d0dU,
			0xfa47094cU, 0x965773a6U, 0xa7f995f7U, 0x9806d8eeU, 0xec5c22a4U, 0xb815ce73U, 0xc7ccaf4dU, 0xae0ee59bU,
			0x69c24ad6U, 0x4ba5b753U, 0xabdcd5a7U, 0xa9a83ebfU, 0x6793e19eU, 0x0ab96078U, 0x4780f703U, 0xf28a822cU,
			0xb50a752fU, 0x2267fd85U, 0xe5ab52c8U, 0xee28c9bcU, 0xbe89ee5bU, 0x2b908de9U, 0x8176a342U, 0x12f3e0d8U,
			0x8302485aU, 0x1b0490b4U, 0x0e51ab48U, 0x235d0689U, 0xf52c5908U, 0x45f41c1bU, 0x2129ed91U, 0xce3bdf21U,
			0x49d15c4bU, 0x2c3656cdU, 0xf9091958U, 0xe6e542dcU, 0xb644653bU, 0x28de9dfdU, 0x1721d0e4U, 0x8238b356U,
			0x1a3e6bb8U, 0x8bcfc33aU, 0xfeafc27cU, 0x8af53836U, 0x09f7706cU, 0xc99d0405U, 0x87ea836aU, 0x4e77876fU,
			0xe14399f8U, 0x2e42bdd5U, 0xe491a9c4U, 0xe07962f4U, 0xebfaf980U, 0x90cb538eU, 0xa4b785e3U, 0x1ed6a088U,
			0x859e6872U, 0x60353abaU, 0x00000000U, 0x25c126a1U, 0xf416a204U, 0xf1c49238U, 0x942398beU, 0x0b839b74U,
			0xe7dfb9d0U, 0x75600146U, 0xef1232b0U, 0x347cd66dU, 0x31aee651U, 0xd405b499U, 0xd0ed7fa9U, 0x86d07866U,
			0x7ee39a32U, 0xad40f58fU, 0xfde1d268U, 0x29e466f1U, 0x30941d5dU, 0x3b178629U, 0x9fa003caU, 0xf833e254U,
			0xc6f65441U, 0x13c91bd4U, 0x069c2028U, 0x05d2303cU, 0xc5b84455U, 0x11bdf0ccU, 0x7714ea5eU, 0x7c97712aU,
			0x7a0b5102U, 0x787fba1aU, 0x36083d75U, 0x1ca24b90U, 0x39636d31U, 0x5956578bU, 0x184a80a0U, 0x563d07cfU,
			0xb3965507U, 0xb0d84513U, 0x24fbddadU, 0x2013169dU, 0xb2acae0bU, 0x92bfb896U, 0xa3115ec7U, 0xc06a7469U,
			0x44cee717U, 0x6241d1a2U, 0x10870bc0U, 0xb4308e23U, 0x84a4937eU, 0x43683c33U, 0x9385439aU, 0xc21e9f71U,
			0x4a9f4c5fU, 0xbdc7fe4fU, 0x8f27080aU, 0x2d0cadc1U, 0xbcfd0543U, 0x9cee13deU, 0x6a8c5ac2U, 0x40262c27U,
			0xcf01242dU, 0xa22ba5cbU, 0x804c584eU, 0x4f4d7c63U, 0x1fec5b84U, 0xcad31411U, 0xaae62eabU, 0x4252c73fU
		}
	};

	static const uint32_t T[4][256] = {
		{
			0xba69d2bbU, 0x54a84de5U, 0x2f5ebce2U, 0x74e8cd25U, 0x53a651f7U, 0xd3bb6bd0U, 0xd2b96fd6U, 0x4d9a29b3U,
			0x50a05dfdU, 0xac458acfU, 0x8d070e09U, 0xbf63c6a5U, 0x70e0dd3dU, 0x52a455f1U, 0x9a29527bU, 0x4c982db5U,
			0xeac98f46U, 0xd5b773c4U, 0x97336655U, 0xd1bf63dcU, 0x3366ccaaU, 0x51a259fbU, 0x5bb671c7U, 0xa651a2f3U,
			0xdea15ffeU, 0x48903dadU, 0xa84d9ad7U, 0x992f5e71U, 0xdbab4be0U, 0x3264c8acU, 0xb773e695U, 0xfce5d732U,
			0xe3dbab70U, 0x9e214263U, 0x913f7e41U, 0x9b2b567dU, 0xe2d9af76U, 0xbb6bd6bdU, 0x4182199bU, 0x6edca579U,
			0xa557aef9U, 0xcb8b0b80U, 0x6bd6b167U, 0x95376e59U, 0xa15fbee1U, 0xf3fbeb10U, 0xb17ffe81U, 0x0204080cU,
			0xcc851792U, 0xc49537a2U, 0x1d3a744eU, 0x14285078U, 0xc39b2bb0U, 0x63c69157U, 0xdaa94fe6U, 0x5dba69d3U,
			0x5fbe61dfU, 0xdca557f2U, 0x7dfae913U, 0xcd871394U, 0x7ffee11fU, 0x5ab475c1U, 0x6cd8ad75U, 0x5cb86dd5U,
			0xf7f3fb08U, 0x264c98d4U, 0xffe3db38U, 0xedc79354U, 0xe8cd874aU, 0x9d274e69U, 0x6fdea17fU, 0x8e010203U,
			0x19326456U, 0xa05dbae7U, 0xf0fde71aU, 0x890f1e11U, 0x0f1e3c22U, 0x070e1c12U, 0xaf4386c5U, 0xfbebcb20U,
			0x08102030U, 0x152a547eU, 0x0d1a342eU, 0x04081018U, 0x01020406U, 0x64c88d45U, 0xdfa35bf8U, 0x76ecc529U,
			0x79f2f90bU, 0xdda753f4U, 0x3d7af48eU, 0x162c5874U, 0x3f7efc82U, 0x376edcb2U, 0x6ddaa973U, 0x3870e090U,
			0xb96fdeb1U, 0x73e6d137U, 0xe9cf834cU, 0x356ad4beU, 0x55aa49e3U, 0x71e2d93bU, 0x7bf6f107U, 0x8c050a0fU,
			0x72e4d531U, 0x880d1a17U, 0xf6f1ff0eU, 0x2a54a8fcU, 0x3e7cf884U, 0x5ebc65d9U, 0x274e9cd2U, 0x468c0589U,
			0x0c183028U, 0x65ca8943U, 0x68d0bd6dU, 0x61c2995bU, 0x03060c0aU, 0xc19f23bcU, 0x57ae41efU, 0xd6b17fceU,
			0xd9af43ecU, 0x58b07dcdU, 0xd8ad47eaU, 0x66cc8549U, 0xd7b37bc8U, 0x3a74e89cU, 0xc88d078aU, 0x3c78f088U,
			0xfae9cf26U, 0x96316253U, 0xa753a6f5U, 0x982d5a77U, 0xecc59752U, 0xb86ddab7U, 0xc7933ba8U, 0xae4182c3U,
			0x69d2b96bU, 0x4b9631a7U, 0xab4b96ddU, 0xa94f9ed1U, 0x67ce814fU, 0x0a14283cU, 0x478e018fU, 0xf2f9ef16U,
			0xb577ee99U, 0x224488ccU, 0xe5d7b364U, 0xeec19f5eU, 0xbe61c2a3U, 0x2b56acfaU, 0x811f3e21U, 0x1224486cU,
			0x831b362dU, 0x1b366c5aU, 0x0e1c3824U, 0x23468ccaU, 0xf5f7f304U, 0x458a0983U, 0x214284c6U, 0xce811f9eU,
			0x499239abU, 0x2c58b0e8U, 0xf9efc32cU, 0xe6d1bf6eU, 0xb671e293U, 0x2850a0f0U, 0x172e5c72U, 0x8219322bU,
			0x1a34685cU, 0x8b0b161dU, 0xfee1df3eU, 0x8a09121bU, 0x09122436U, 0xc98f038cU, 0x87132635U, 0x4e9c25b9U,
			0xe1dfa37cU, 0x2e5cb8e4U, 0xe4d5b762U, 0xe0dda77aU, 0xebcb8b40U, 0x903d7a47U, 0xa455aaffU, 0x1e3c7844U,
			0x85172e39U, 0x60c09d5dU, 0x00000000U, 0x254a94deU, 0xf4f5f702U, 0xf1ffe31cU, 0x94356a5fU, 0x0b162c3aU,
			0xe7d3bb68U, 0x75eac923U, 0xefc39b58U, 0x3468d0b8U, 0x3162c4a6U, 0xd4b577c2U, 0xd0bd67daU, 0x86112233U,
			0x7efce519U, 0xad478ec9U, 0xfde7d334U, 0x2952a4f6U, 0x3060c0a0U, 0x3b76ec9aU, 0x9f234665U, 0xf8edc72aU,
			0xc6913faeU, 0x13264c6aU, 0x060c1814U, 0x050a141eU, 0xc59733a4U, 0x11224466U, 0x77eec12fU, 0x7cf8ed15U,
			0x7af4f501U, 0x78f0fd0dU, 0x366cd8b4U, 0x1c387048U, 0x3972e496U, 0x59b279cbU, 0x18306050U, 0x56ac45e9U,
			0xb37bf68dU, 0xb07dfa87U, 0x244890d8U, 0x204080c0U, 0xb279f28bU, 0x9239724bU, 0xa35bb6edU, 0xc09d27baU,
			0x44880d85U, 0x62c49551U, 0x10204060U, 0xb475ea9fU, 0x84152a3fU, 0x43861197U, 0x933b764dU, 0xc2992fb6U,
			0x4a9435a1U, 0xbd67cea9U, 0x8f030605U, 0x2d5ab4eeU, 0xbc65caafU, 0x9c254a6fU, 0x6ad4b561U, 0x40801d9dU,
			0xcf831b98U, 0xa259b2ebU, 0x801d3a27U, 0x4f9e21bfU, 0x1f3e7c42U, 0xca890f86U, 0xaa4992dbU, 0x42841591U
		},
		{
			0x69babbd2U, 0xa854e54dU, 0x5e2fe2bcU, 0xe87425cdU, 0xa653f751U, 0xbbd3d06bU, 0xb9d2d66fU, 0x9a4db329U,
			0xa050fd5dU, 0x45accf8aU, 0x078d090eU, 0x63bfa5c6U, 0xe0703dddU, 0xa452f155U, 0x299a7b52U, 0x984cb52dU,
			0xc9ea468fU, 0xb7d5c473U, 0x33975566U, 0xbfd1dc63U, 0x6633aaccU, 0xa251fb59U, 0xb65bc771U, 0x51a6f3a2U,
			0xa1defe5fU, 0x9048ad3dU, 0x4da8d79aU, 0x2f99715eU, 0xabdbe04bU, 0x6432acc8U, 0x73b795e6U, 0xe5fc32d7U,
			0xdbe370abU, 0x219e6342U, 0x3f91417eU, 0x2b9b7d56U, 0xd9e276afU, 0x6bbbbdd6U, 0x82419b19U, 0xdc6e79a5U,
			0x57a5f9aeU, 0x8bcb800bU, 0xd66b67b1U, 0x3795596eU, 0x5fa1e1beU, 0xfbf310ebU, 0x7fb181feU, 0x04020c08U,
			0x85cc9217U, 0x95c4a237U, 0x3a1d4e74U, 0x28147850U, 0x9bc3b02bU, 0xc6635791U, 0xa9dae64fU, 0xba5dd369U,
			0xbe5fdf61U, 0xa5dcf257U, 0xfa7d13e9U, 0x87cd9413U, 0xfe7f1fe1U, 0xb45ac175U, 0xd86c75adU, 0xb85cd56dU,
			0xf3f708fbU, 0x4c26d498U, 0xe3ff38dbU, 0xc7ed5493U, 0xcde84a87U, 0x279d694eU, 0xde6f7fa1U, 0x018e0302U,
			0x32195664U, 0x5da0e7baU, 0xfdf01ae7U, 0x0f89111eU, 0x1e0f223cU, 0x0e07121cU, 0x43afc586U, 0xebfb20cbU,
			0x10083020U, 0x2a157e54U, 0x1a0d2e34U, 0x08041810U, 0x02010604U, 0xc864458dU, 0xa3dff85bU, 0xec7629c5U,
			0xf2790bf9U, 0xa7ddf453U, 0x7a3d8ef4U, 0x2c167458U, 0x7e3f82fcU, 0x6e37b2dcU, 0xda6d73a9U, 0x703890e0U,
			0x6fb9b1deU, 0xe67337d1U, 0xcfe94c83U, 0x6a35bed4U, 0xaa55e349U, 0xe2713bd9U, 0xf67b07f1U, 0x058c0f0aU,
			0xe47231d5U, 0x0d88171aU, 0xf1f60effU, 0x542afca8U, 0x7c3e84f8U, 0xbc5ed965U, 0x4e27d29cU, 0x8c468905U,
			0x180c2830U, 0xca654389U, 0xd0686dbdU, 0xc2615b99U, 0x06030a0cU, 0x9fc1bc23U, 0xae57ef41U, 0xb1d6ce7fU,
			0xafd9ec43U, 0xb058cd7dU, 0xadd8ea47U, 0xcc664985U, 0xb3d7c87bU, 0x743a9ce8U, 0x8dc88a07U, 0x783c88f0U,
			0xe9fa26cfU, 0x31965362U, 0x53a7f5a6U, 0x2d98775aU, 0xc5ec5297U, 0x6db8b7daU, 0x93c7a83bU, 0x41aec382U,
			0xd2696bb9U, 0x964ba731U, 0x4babdd96U, 0x4fa9d19eU, 0xce674f81U, 0x140a3c28U, 0x8e478f01U, 0xf9f216efU,
			0x77b599eeU, 0x4422cc88U, 0xd7e564b3U, 0xc1ee5e9fU, 0x61bea3c2U, 0x562bfaacU, 0x1f81213eU, 0x24126c48U,
			0x1b832d36U, 0x361b5a6cU, 0x1c0e2438U, 0x4623ca8cU, 0xf7f504f3U, 0x8a458309U, 0x4221c684U, 0x81ce9e1fU,
			0x9249ab39U, 0x582ce8b0U, 0xeff92cc3U, 0xd1e66ebfU, 0x71b693e2U, 0x5028f0a0U, 0x2e17725cU, 0x19822b32U,
			0x341a5c68U, 0x0b8b1d16U, 0xe1fe3edfU, 0x098a1b12U, 0x12093624U, 0x8fc98c03U, 0x13873526U, 0x9c4eb925U,
			0xdfe17ca3U, 0x5c2ee4b8U, 0xd5e462b7U, 0xdde07aa7U, 0xcbeb408bU, 0x3d90477aU, 0x55a4ffaaU, 0x3c1e4478U,
			0x1785392eU, 0xc0605d9dU, 0x00000000U, 0x4a25de94U, 0xf5f402f7U, 0xfff11ce3U, 0x35945f6aU, 0x160b3a2cU,
			0xd3e768bbU, 0xea7523c9U, 0xc3ef589bU, 0x6834b8d0U, 0x6231a6c4U, 0xb5d4c277U, 0xbdd0da67U, 0x11863322U,
			0xfc7e19e5U, 0x47adc98eU, 0xe7fd34d3U, 0x5229f6a4U, 0x6030a0c0U, 0x763b9aecU, 0x239f6546U, 0xedf82ac7U,
			0x91c6ae3fU, 0x26136a4cU, 0x0c061418U, 0x0a051e14U, 0x97c5a433U, 0x22116644U, 0xee772fc1U, 0xf87c15edU,
			0xf47a01f5U, 0xf0780dfdU, 0x6c36b4d8U, 0x381c4870U, 0x723996e4U, 0xb259cb79U, 0x30185060U, 0xac56e945U,
			0x7bb38df6U, 0x7db087faU, 0x4824d890U, 0x4020c080U, 0x79b28bf2U, 0x39924b72U, 0x5ba3edb6U, 0x9dc0ba27U,
			0x8844850dU, 0xc4625195U, 0x20106040U, 0x75b49feaU, 0x15843f2aU, 0x86439711U, 0x3b934d76U, 0x99c2b62fU,
			0x944aa135U, 0x67bda9ceU, 0x038f0506U, 0x5a2deeb4U, 0x65bcafcaU, 0x259c6f4aU, 0xd46a61b5U, 0x80409d1dU,
			0x83cf981bU, 0x59a2ebb2U, 0x1d80273aU, 0x9e4fbf21U, 0x3e1f427cU, 0x89ca860fU, 0x49aadb92U, 0x84429115U
		},
		{
			0xd2bbba69U, 0x4de554a8U, 0xbce22f5eU, 0xcd2574e8U, 0x51f753a6U, 0x6bd0d3bbU, 0x6fd6d2b9U, 0x29b34d9aU,
			0x5dfd50a0U, 0x8acfac45U, 0x0e098d07U, 0xc6a5bf63U, 0xdd3d70e0U, 0x55f152a4U, 0x527b9a29U, 0x2db54c98U,
			0x8f46eac9U, 0x73c4d5b7U, 0x66559733U, 0x63dcd1bfU, 0xccaa3366U, 0x59fb51a2U, 0x71c75bb6U, 0xa2f3a651U,
			0x5ffedea1U, 0x3dad4890U, 0x9ad7a84dU, 0x5e71992fU, 0x4be0dbabU, 0xc8ac3264U, 0xe695b773U, 0xd732fce5U,
			0xab70e3dbU, 0x42639e21U, 0x7e41913fU, 0x567d9b2bU, 0xaf76e2d9U, 0xd6bdbb6bU, 0x199b4182U, 0xa5796edcU,
			0xaef9a557U, 0x0b80cb8bU, 0xb1676bd6U, 0x6e599537U, 0xbee1a15fU, 0xeb10f3fbU, 0xfe81b17fU, 0x080c0204U,
			0x1792cc85U, 0x37a2c495U, 0x744e1d3aU, 0x50781428U, 0x2bb0c39bU, 0x915763c6U, 0x4fe6daa9U, 0x69d35dbaU,
			0x61df5fbeU, 0x57f2dca5U, 0xe9137dfaU, 0x1394cd87U, 0xe11f7ffeU, 0x75c15ab4U, 0xad756cd8U, 0x6dd55cb8U,
			0xfb08f7f3U, 0x98d4264cU, 0xdb38ffe3U, 0x9354edc7U, 0x874ae8cdU, 0x4e699d27U, 0xa17f6fdeU, 0x02038e01U,
			0x64561932U, 0xbae7a05dU, 0xe71af0fdU, 0x1e11890fU, 0x3c220f1eU, 0x1c12070eU, 0x86c5af43U, 0xcb20fbebU,
			0x20300810U, 0x547e152aU, 0x342e0d1aU, 0x10180408U, 0x04060102U, 0x8d4564c8U, 0x5bf8dfa3U, 0xc52976ecU,
			0xf90b79f2U, 0x53f4dda7U, 0xf48e3d7aU, 0x5874162cU, 0xfc823f7eU, 0xdcb2376eU, 0xa9736ddaU, 0xe0903870U,
			0xdeb1b96fU, 0xd13773e6U, 0x834ce9cfU, 0xd4be356aU, 0x49e355aaU, 0xd93b71e2U, 0xf1077bf6U, 0x0a0f8c05U,
			0xd53172e4U, 0x1a17880dU, 0xff0ef6f1U, 0xa8fc2a54U, 0xf8843e7cU, 0x65d95ebcU, 0x9cd2274eU, 0x0589468cU,
			0x30280c18U, 0x894365caU, 0xbd6d68d0U, 0x995b61c2U, 0x0c0a0306U, 0x23bcc19fU, 0x41ef57aeU, 0x7fced6b1U,
			0x43ecd9afU, 0x7dcd58b0U, 0x47ead8adU, 0x854966ccU, 0x7bc8d7b3U, 0xe89c3a74U, 0x078ac88dU, 0xf0883c78U,
			0xcf26fae9U, 0x62539631U, 0xa6f5a753U, 0x5a77982dU, 0x9752ecc5U, 0xdab7b86dU, 0x3ba8c793U, 0x82c3ae41U,
			0xb96b69d2U, 0x31a74b96U, 0x96ddab4bU, 0x9ed1a94fU, 0x814f67ceU, 0x283c0a14U, 0x018f478eU, 0xef16f2f9U,
			0xee99b577U, 0x88cc2244U, 0xb364e5d7U, 0x9f5eeec1U, 0xc2a3be61U, 0xacfa2b56U, 0x3e21811fU, 0x486c1224U,
			0x362d831bU, 0x6c5a1b36U, 0x38240e1cU, 0x8cca2346U, 0xf304f5f7U, 0x0983458aU, 0x84c62142U, 0x1f9ece81U,
			0x39ab4992U, 0xb0e82c58U, 0xc32cf9efU, 0xbf6ee6d1U, 0xe293b671U, 0xa0f02850U, 0x5c72172eU, 0x322b8219U,
			0x685c1a34U, 0x161d8b0bU, 0xdf3efee1U, 0x121b8a09U, 0x24360912U, 0x038cc98fU, 0x26358713U, 0x25b94e9cU,
			0xa37ce1dfU, 0xb8e42e5cU, 0xb762e4d5U, 0xa77ae0ddU, 0x8b40ebcbU, 0x7a47903dU, 0xaaffa455U, 0x78441e3cU,
			0x2e398517U, 0x9d5d60c0U, 0x00000000U, 0x94de254aU, 0xf702f4f5U, 0xe31cf1ffU, 0x6a5f9435U, 0x2c3a0b16U,
			0xbb68e7d3U, 0xc92375eaU, 0x9b58efc3U, 0xd0b83468U, 0xc4a63162U, 0x77c2d4b5U, 0x67dad0bdU, 0x22338611U,
			0xe5197efcU, 0x8ec9ad47U, 0xd334fde7U, 0xa4f62952U, 0xc0a03060U, 0xec9a3b76U, 0x46659f23U, 0xc72af8edU,
			0x3faec691U, 0x4c6a1326U, 0x1814060cU, 0x141e050aU, 0x33a4c597U, 0x44661122U, 0xc12f77eeU, 0xed157cf8U,
			0xf5017af4U, 0xfd0d78f0U, 0xd8b4366cU, 0x70481c38U, 0xe4963972U, 0x79cb59b2U, 0x60501830U, 0x45e956acU,
			0xf68db37bU, 0xfa87b07dU, 0x90d82448U, 0x80c02040U, 0xf28bb279U, 0x724b9239U, 0xb6eda35bU, 0x27bac09dU,
			0x0d854488U, 0x955162c4U, 0x40601020U, 0xea9fb475U, 0x2a3f8415U, 0x11974386U, 0x764d933bU, 0x2fb6c299U,
			0x35a14a94U, 0xcea9bd67U, 0x06058f03U, 0xb4ee2d5aU, 0xcaafbc65U, 0x4a6f9c25U, 0xb5616ad4U, 0x1d9d4080U,
			0x1b98cf83U, 0xb2eba259U, 0x3a27801dU, 0x21bf4f9eU, 0x7c421f3eU, 0x0f86ca89U, 0x92dbaa49U, 0x15914284U
		},
		{
			0xbbd269baU, 0xe54da854U, 0xe2bc5e2fU, 0x25cde874U, 0xf751a653U, 0xd06bbbd3U, 0xd66fb9d2U, 0xb3299a4dU,
			0xfd5da050U, 0xcf8a45acU, 0x090e078dU, 0xa5c663bfU, 0x3ddde070U, 0xf155a452U, 0x7b52299aU, 0xb52d984cU,
			0x468fc9eaU, 0xc473b7d5U, 0x55663397U, 0xdc63bfd1U, 0xaacc6633U, 0xfb59a251U, 0xc771b65bU, 0xf3a251a6U,
			0xfe5fa1deU, 0xad3d9048U, 0xd79a4da8U, 0x715e2f99U, 0xe04babdbU, 0xacc86432U, 0x95e673b7U, 0x32d7e5fcU,
			0x70abdbe3U, 0x6342219eU, 0x417e3f91U, 0x7d562b9bU, 0x76afd9e2U, 0xbdd66bbbU, 0x9b198241U, 0x79a5dc6eU,
			0xf9ae57a5U, 0x800b8bcbU, 0x67b1d66bU, 0x596e3795U, 0xe1be5fa1U, 0x10ebfbf3U, 0x81fe7fb1U, 0x0c080402U,
			0x921785ccU, 0xa23795c4U, 0x4e743a1dU, 0x78502814U, 0xb02b9bc3U, 0x5791c663U, 0xe64fa9daU, 0xd369ba5dU,
			0xdf61be5fU, 0xf257a5dcU, 0x13e9fa7dU, 0x941387cdU, 0x1fe1fe7fU, 0xc175b45aU, 0x75add86cU, 0xd56db85cU,
			0x08fbf3f7U, 0xd4984c26U, 0x38dbe3ffU, 0x5493c7edU, 0x4a87cde8U, 0x694e279dU, 0x7fa1de6fU, 0x0302018eU,
			0x56643219U, 0xe7ba5da0U, 0x1ae7fdf0U, 0x111e0f89U, 0x223c1e0fU, 0x121c0e07U, 0xc58643afU, 0x20cbebfbU,
			0x30201008U, 0x7e542a15U, 0x2e341a0dU, 0x18100804U, 0x06040201U, 0x458dc864U, 0xf85ba3dfU, 0x29c5ec76U,
			0x0bf9f279U, 0xf453a7ddU, 0x8ef47a3dU, 0x74582c16U, 0x82fc7e3fU, 0xb2dc6e37U, 0x73a9da6dU, 0x90e07038U,
			0xb1de6fb9U, 0x37d1e673U, 0x4c83cfe9U, 0xbed46a35U, 0xe349aa55U, 0x3bd9e271U, 0x07f1f67bU, 0x0f0a058cU,
			0x31d5e472U, 0x171a0d88U, 0x0efff1f6U, 0xfca8542aU, 0x84f87c3eU, 0xd965bc5eU, 0xd29c4e27U, 0x89058c46U,
			0x2830180cU, 0x4389ca65U, 0x6dbdd068U, 0x5b99c261U, 0x0a0c0603U, 0xbc239fc1U, 0xef41ae57U, 0xce7fb1d6U,
			0xec43afd9U, 0xcd7db058U, 0xea47add8U, 0x4985cc66U, 0xc87bb3d7U, 0x9ce8743aU, 0x8a078dc8U, 0x88f0783cU,
			0x26cfe9faU, 0x53623196U, 0xf5a653a7U, 0x775a2d98U, 0x5297c5ecU, 0xb7da6db8U, 0xa83b93c7U, 0xc38241aeU,
			0x6bb9d269U, 0xa731964bU, 0xdd964babU, 0xd19e4fa9U, 0x4f81ce67U, 0x3c28140aU, 0x8f018e47U, 0x16eff9f2U,
			0x99ee77b5U, 0xcc884422U, 0x64b3d7e5U, 0x5e9fc1eeU, 0xa3c261beU, 0xfaac562bU, 0x213e1f81U, 0x6c482412U,
			0x2d361b83U, 0x5a6c361bU, 0x24381c0eU, 0xca8c4623U, 0x04f3f7f5U, 0x83098a45U, 0xc6844221U, 0x9e1f81ceU,
			0xab399249U, 0xe8b0582cU, 0x2cc3eff9U, 0x6ebfd1e6U, 0x93e271b6U, 0xf0a05028U, 0x725c2e17U, 0x2b321982U,
			0x5c68341aU, 0x1d160b8bU, 0x3edfe1feU, 0x1b12098aU, 0x36241209U, 0x8c038fc9U, 0x35261387U, 0xb9259c4eU,
			0x7ca3dfe1U, 0xe4b85c2eU, 0x62b7d5e4U, 0x7aa7dde0U, 0x408bcbebU, 0x477a3d90U, 0xffaa55a4U, 0x44783c1eU,
			0x392e1785U, 0x5d9dc060U, 0x00000000U, 0xde944a25U, 0x02f7f5f4U, 0x1ce3fff1U, 0x5f6a3594U, 0x3a2c160bU,
			0x68bbd3e7U, 0x23c9ea75U, 0x589bc3efU, 0xb8d06834U, 0xa6c46231U, 0xc277b5d4U, 0xda67bdd0U, 0x33221186U,
			0x19e5fc7eU, 0xc98e47adU, 0x34d3e7fdU, 0xf6a45229U, 0xa0c06030U, 0x9aec763bU, 0x6546239fU, 0x2ac7edf8U,
			0xae3f91c6U, 0x6a4c2613U, 0x14180c06U, 0x1e140a05U, 0xa43397c5U, 0x66442211U, 0x2fc1ee77U, 0x15edf87cU,
			0x01f5f47aU, 0x0dfdf078U, 0xb4d86c36U, 0x4870381cU, 0x96e47239U, 0xcb79b259U, 0x50603018U, 0xe945ac56U,
			0x8df67bb3U, 0x87fa7db0U, 0xd8904824U, 0xc0804020U, 0x8bf279b2U, 0x4b723992U, 0xedb65ba3U, 0xba279dc0U,
			0x850d8844U, 0x5195c462U, 0x60402010U, 0x9fea75b4U, 0x3f2a1584U, 0x97118643U, 0x4d763b93U, 0xb62f99c2U,
			0xa135944aU, 0xa9ce67bdU, 0x0506038fU, 0xeeb45a2dU, 0xafca65bcU, 0x6f4a259cU, 0x61b5d46aU, 0x9d1d8040U,
			0x981b83cfU, 0xebb259a2U, 0x273a1d80U, 0xbf219e4fU, 0x427c3e1fU, 0x860f89caU, 0xdb9249aaU, 0x91158442U
		}
	};

	static const uint32_t RC[] =
	{
		0xba542f74U, 0x53d3d24dU, 0x50ac8dbfU, 0x70529a4cU, 0xead597d1U, 0x33515ba6U, 0xde48a899U, 0xdb32b7fcU,
		0xe39e919bU, 0xe2bb416eU, 0xa5cb6b95U, 0xa1f3b102U, 0xccc41d14U, 0xc363da5dU, 0x5fdc7dcdU, 0x7f5a6c5cU,
		0xf726ffedU, 0xe89d6f8eU, 0x19a0f089U, 0x0f07affbU
	};

	template<int B>
	static inline bool anubis_init(const unsigned char* key, block_cipher::direction direction, uint32_t W_[][4])
	{
		const int N = B / 32;
		const int R = 8 + N;
		uint32_t k[N];
		uint32_t t[N];

		for (int i = 0; i < N; i++)
			k[i] = swap_uint32(*(((const uint32_t*)key) + i));

		for (int r = 0; r <= R; r++)
		{
			W_[r][0] = W_[r][1] = W_[r][2] = W_[r][3] = 0;
			for (int i = 0; i < N; i++)
			{
				W_[r][0] ^= U[i][(k[i] >> 24)];
				W_[r][1] ^= U[i][(k[i] >> 16) & 0xff];
				W_[r][2] ^= U[i][(k[i] >> 8) & 0xff];
				W_[r][3] ^= U[i][(k[i]) & 0xff];
			}

			if (r != R)
			{
				for (int i = 0; i < N; i++)
					t[i] = T[0][(k[(N + i) % N] >> 24)] ^ T[1][(k[(N + i - 1) % N] >> 16) & 0xff] ^ T[2][(k[(N + i - 2) % N] >> 8) & 0xff] ^ T[3][(k[(N + i - 3) % N]) & 0xff];

				k[0] = t[0] ^ RC[r];
				for (int i = 1; i < N; i++)
					k[i] = t[i];
			}
		}

		if (direction == block_cipher::decryption)
		{
			for (int i = 0; i < (R + 1) / 2; i++)
			{
				std::swap(W_[i][0], W_[R - i][0]);
				std::swap(W_[i][1], W_[R - i][1]);
				std::swap(W_[i][2], W_[R - i][2]);
				std::swap(W_[i][3], W_[R - i][3]);
			}

			for (int r = 1; r < R; r++) {
				for (int i = 0; i < 4; i++) {
					W_[r][i] = T[0][U[0][(W_[r][i] >> 24)] & 0xff] ^ T[1][U[0][(W_[r][i] >> 16) & 0xff] & 0xff] ^ T[2][U[0][(W_[r][i] >> 8) & 0xff] & 0xff] ^ T[3][U[0][W_[r][i] & 0xff] & 0xff];
				}
			}
		}
		return true;
	}

	template<int B>
	static inline void anubis_encrypt_block(const unsigned char* in, unsigned char* out, uint32_t W_[][4])
	{
		const int N = B / 32;
		const int R = 8 + N;
		uint32_t s0, s1, s2, s3;
		uint32_t t0, t1, t2, t3;

		s0 = swap_uint32(*(((const uint32_t*)in) + 0)) ^ W_[0][0];
		s1 = swap_uint32(*(((const uint32_t*)in) + 1)) ^ W_[0][1];
		s2 = swap_uint32(*(((const uint32_t*)in) + 2)) ^ W_[0][2];
		s3 = swap_uint32(*(((const uint32_t*)in) + 3)) ^ W_[0][3];

		for (int r = 1; r < R; r++) {
			t0 = T[0][(s0 >> 24)] ^ T[1][(s1 >> 24)] ^ T[2][(s2 >> 24)] ^ T[3][(s3 >> 24)] ^ W_[r][0];
			t1 = T[0][(s0 >> 16) & 0xff] ^ T[1][(s1 >> 16) & 0xff] ^ T[2][(s2 >> 16) & 0xff] ^ T[3][(s3 >> 16) & 0xff] ^ W_[r][1];
			t2 = T[0][(s0 >> 8) & 0xff] ^ T[1][(s1 >> 8) & 0xff] ^ T[2][(s2 >> 8) & 0xff] ^ T[3][(s3 >> 8) & 0xff] ^ W_[r][2];
			t3 = T[0][(s0)& 0xff] ^ T[1][(s1)& 0xff] ^ T[2][(s2)& 0xff] ^ T[3][(s3)& 0xff] ^ W_[r][3];
			s0 = t0;
			s1 = t1;
			s2 = t2;
			s3 = t3;
		}

		// could also use U[0] here instead of T[n]
		t0 = (T[0][(s0 >> (24 - 0 * 8)) & 0xff] & 0xff000000U) ^ (T[1][(s1 >> (24 - 0 * 8)) & 0xff] & 0x00ff0000U) ^
			(T[2][(s2 >> (24 - 0 * 8)) & 0xff] & 0x0000ff00U) ^ (T[3][(s3 >> (24 - 0 * 8)) & 0xff] & 0x000000ffU) ^ W_[R][0];
		t1 = (T[0][(s0 >> (24 - 1 * 8)) & 0xff] & 0xff000000U) ^ (T[1][(s1 >> (24 - 1 * 8)) & 0xff] & 0x00ff0000U) ^
			(T[2][(s2 >> (24 - 1 * 8)) & 0xff] & 0x0000ff00U) ^ (T[3][(s3 >> (24 - 1 * 8)) & 0xff] & 0x000000ffU) ^ W_[R][1];
		t2 = (T[0][(s0 >> (24 - 2 * 8)) & 0xff] & 0xff000000U) ^ (T[1][(s1 >> (24 - 2 * 8)) & 0xff] & 0x00ff0000U) ^
			(T[2][(s2 >> (24 - 2 * 8)) & 0xff] & 0x0000ff00U) ^ (T[3][(s3 >> (24 - 2 * 8)) & 0xff] & 0x000000ffU) ^ W_[R][2];
		t3 = (T[0][(s0 >> (24 - 3 * 8)) & 0xff] & 0xff000000U) ^ (T[1][(s1 >> (24 - 3 * 8)) & 0xff] & 0x00ff0000U) ^
			(T[2][(s2 >> (24 - 3 * 8)) & 0xff] & 0x0000ff00U) ^ (T[3][(s3 >> (24 - 3 * 8)) & 0xff] & 0x000000ffU) ^ W_[R][3];

		*(((uint32_t*)out) + 0) = swap_uint32(t0);
		*(((uint32_t*)out) + 1) = swap_uint32(t1);
		*(((uint32_t*)out) + 2) = swap_uint32(t2);
		*(((uint32_t*)out) + 3) = swap_uint32(t3);
	}

	anubis128::~anubis128()
	{
		clear();
	}

	void anubis128::clear()
	{
		zero_memory(W_, sizeof(W_));
	}

	bool anubis128::init(const unsigned char* key, block_cipher::direction direction)
	{
		return anubis_init<128>(key, direction, W_);
	}

	void anubis128::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<128>(in, out, W_);
	}

	void anubis128::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<128>(in, out, W_);
	}

	anubis160::~anubis160()
	{
		clear();
	}

	void anubis160::clear()
	{
		zero_memory(W_, sizeof(W_));
	}

	bool anubis160::init(const unsigned char* key, block_cipher::direction direction)
	{
		return anubis_init<160>(key, direction, W_);
	}

	void anubis160::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<160>(in, out, W_);
	}

	void anubis160::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<160>(in, out, W_);
	}

	anubis192::~anubis192()
	{
		clear();
	}

	void anubis192::clear()
	{
		zero_memory(W_, sizeof(W_));
	}

	bool anubis192::init(const unsigned char* key, block_cipher::direction direction)
	{
		return anubis_init<192>(key, direction, W_);
	}

	void anubis192::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<192>(in, out, W_);
	}

	void anubis192::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<192>(in, out, W_);
	}

	anubis224::~anubis224()
	{
		clear();
	}

	void anubis224::clear()
	{
		zero_memory(W_, sizeof(W_));
	}

	bool anubis224::init(const unsigned char* key, block_cipher::direction direction)
	{
		return anubis_init<224>(key, direction, W_);
	}

	void anubis224::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<224>(in, out, W_);
	}

	void anubis224::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<224>(in, out, W_);
	}

	anubis256::~anubis256()
	{
		clear();
	}

	void anubis256::clear()
	{
		zero_memory(W_, sizeof(W_));
	}

	bool anubis256::init(const unsigned char* key, block_cipher::direction direction)
	{
		return anubis_init<256>(key, direction, W_);
	}

	void anubis256::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<256>(in, out, W_);
	}

	void anubis256::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<256>(in, out, W_);
	}

	anubis288::~anubis288()
	{
		clear();
	}

	void anubis288::clear()
	{
		zero_memory(W_, sizeof(W_));
	}

	bool anubis288::init(const unsigned char* key, block_cipher::direction direction)
	{
		return anubis_init<288>(key, direction, W_);
	}

	void anubis288::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<288>(in, out, W_);
	}

	void anubis288::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<288>(in, out, W_);
	}

	anubis320::~anubis320()
	{
		clear();
	}

	void anubis320::clear()
	{
		zero_memory(W_, sizeof(W_));
	}

	bool anubis320::init(const unsigned char* key, block_cipher::direction direction)
	{
		return anubis_init<320>(key, direction, W_);
	}

	void anubis320::encrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<320>(in, out, W_);
	}

	void anubis320::decrypt_block(const unsigned char* in, unsigned char* out)
	{
		return anubis_encrypt_block<320>(in, out, W_);
	}

#if 0
	static unsigned char mul_gf_11d(unsigned char x, unsigned char y) {
		unsigned char r = 0;
		unsigned char hbit = 0;
		while (y) {
			if (y & 1)
				r ^= x;
			hbit = x & 0x80;
			x <<= 1;
			if (hbit == 0x80)
				x ^= 0x011d;
			y >>= 1;
		}
		return r;
	}

	static unsigned char pow_gf_11d(unsigned char x, unsigned char y) {
		unsigned char res = 1;
		for (int i = 0; i < y; i++)
			res = mul_gf_11d(res, x);

		return res;
	}

	void anubis_gen_tables()
	{
		using namespace std;
		cout << "static const uint32_t RC[] = {\n";
		unsigned char s = 0;
		for (int i = 0; i < 20; i++)
		{
			//= T4[c] & 0xFF;
			//for (i = 0, s = 0; i < 18;)
				uint32_t rc = T4[(s) & 0xFF] << 24
				| (T4[(s+1) & 0xFF] & 0xFF) << 16
				| (T4[(s+2) & 0xFF] & 0xFF) << 8
				| (T4[(s+3) & 0xFF] & 0xFF);
				s += 4;
				printf("0x%08xU", rc);
				if (i == 19)
					printf("\n\t\t");
				else if ((i + 1) % 8 == 0)
					printf(",\n\t\t");
				else
					printf(", ");

		}
		cout << "};\n\n";
		cout << "static const uint32_t U[10][256] = {\n";
		for (int i = 0; i < 10; i++)
		{
			cout << "\t{\n\t\t";
			for (int c = 0; c < 256; c++)
			{
				unsigned char s = T4[c] & 0xFF;

				// generate T5:
				//unsigned char v1 = c;
				//unsigned char v2 = mul_gf_11d(c, 2);
				//unsigned char v3 = mul_gf_11d(c, 6);
				//unsigned char v4 = mul_gf_11d(c, 8);

				unsigned char v1 = s;
				unsigned char v2 = mul_gf_11d(s, pow_gf_11d(2, i));
				unsigned char v3 = mul_gf_11d(s, pow_gf_11d(6, i));
				unsigned char v4 = mul_gf_11d(s, pow_gf_11d(8, i));
				uint32_t res = (uint32_t(v1) << 24) ^ (uint32_t(v2) << 16) ^ (uint32_t(v3) << 8) ^ (uint32_t(v4));
				printf("0x%08xU", res);
				if (c == 255)
					printf("\n\t\t");
				else if ((c + 1) % 8 == 0)
					printf(",\n\t\t");
				else
					printf(", ");
			}
			cout << "\t}";
			if (i != 9)
				cout << ",";
			cout << "\n";
		}
		cout << "};\n\n";
		cout << "static const uint32_t T[4][256] = {\n";
		for (int i = 0; i < 4; i++)
		{
			cout << "\t{\n\t\t";
			for (int c = 0; c < 256; c++)
			{
				unsigned char s = T4[c] & 0xFF;

				unsigned char v1, v2, v3, v4;
				if (i == 0)
				{
					v1 = s;
					v2 = mul_gf_11d(s, 2);
					v3 = mul_gf_11d(s, 4);
					v4 = mul_gf_11d(s, 6);
				}
				else if (i == 1)
				{
					v1 = mul_gf_11d(s, 2);
					v2 = s;
					v3 = mul_gf_11d(s, 6);
					v4 = mul_gf_11d(s, 4);
				}
				else if (i == 2)
				{
					v1 = mul_gf_11d(s, 4);
					v2 = mul_gf_11d(s, 6);
					v3 = s;
					v4 = mul_gf_11d(s, 2);
				}
				else if (i == 3)
				{
					v1 = mul_gf_11d(s, 6);
					v2 = mul_gf_11d(s, 4);
					v3 = mul_gf_11d(s, 2);
					v4 = s;
				}
				uint32_t res = (uint32_t(v1) << 24) ^ (uint32_t(v2) << 16) ^ (uint32_t(v3) << 8) ^ (uint32_t(v4));
				printf("0x%08xU", res);
				if (c == 255)
					printf("\n\t\t");
				else if ((c + 1) % 8 == 0)
					printf(",\n\t\t");
				else
					printf(", ");
			}
			cout << "\t}";
			if (i != 3)
				cout << ",";
			cout << "\n";
		}
	}
#endif
}

